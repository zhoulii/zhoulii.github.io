<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flink 1.11 新特性：Application 部署模式</title>
    <url>/2020/10/11/flink/Flink%201.11%20%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9AApplication%20%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<p>Flink 1.11 新增了一种新的应用部署模式：application mode，下面我们来了解下这种部署模式解决了什么问题以及是如何实现的。</p>
<h2 id="01-当前的应用部署模式"><a href="#01-当前的应用部署模式" class="headerlink" title="01.当前的应用部署模式"></a>01.当前的应用部署模式</h2><p>在 1.11 版本之前，Flink 支持两种部署模式：session 和 per-job，它们的区别在于集群的生命周期和应用的资源隔离程度不同。</p>
<p><strong>session mode</strong></p>
<p>session 模式假定已经存在了一个 Flink 集群，所有的作业都提交到这个集群上，作业间共用并竞争这个集群的资源。在 session 模式下，用户无需为每个作业分配集群资源，但作业共用 jobmanager 和 taskmanager，如果一个作业导致 taskmanager 宕机，那么这个 taskmanager 上承载的作业都会失败。而大规模的作业失败意味着大规模的作业恢复，作业恢复过程需要访问文件系统，这可能导致文件系统的压力过大。此外，jobmanager 负责记录跟踪作业的状态，启动的作业越多，jobmanager 的负载也会越大。</p>
<p>除了上面提到的问题，session 模式还有一个不易察觉的缺点，那就是查看作业日志较为不方便，究其原因，同样是共用 taskmanager 引起的。</p>
<p>虽然问题较多，但 session 模式还是有其适用用场景的。得益于一个既存集群的优势，session 模式下应用的启动速度较快，所以 Session 模式一般用来部署那些对延迟非常敏感但运行时长较短的作业。</p>
<p><strong>per-job mode</strong></p>
<p>per-job 模式下，会使用集群管理框架（如 yarn、kubernetes）为每个作业创建一个独享的 Flink 集群，当作业运行结束，集群资源会被释放。显然，per-job 模式下作业启动的延时会比较大，但是由于作业资源完全隔离，一个作业的失败不会影响其他作业的运行。此外，per-job 模式下，作业不会共享 jobmanager，也就不会发生 session 模式中因作业过多导致 jobmanager 负载大的问题。</p>
<p>结合上述的特点，per-job 模式通常用来部署长时运行且对启动延迟不敏感的作业。</p>
<h2 id="02-部署模式存在的问题"><a href="#02-部署模式存在的问题" class="headerlink" title="02.部署模式存在的问题"></a>02.部署模式存在的问题</h2><p>无论是提交 session 模式还是 per-job 模式的应用，Flink 应用的 main 方法都是在客户端执行，主要包含如下两个过程：1）将作业翻译成 JobGraph；2）将 JobGraph 及依赖上传到集群中。如果应用逻辑很复杂，步骤 1 则会消耗更多的 CPU 及内存，如果依赖较大，步骤 2 则会消耗更高的带宽。所以，如果多个用户、在同一节点（一般来讲，在生产环境中，是会有一个节点作为应用提交的统一入口）同时提交 Flink 应用，这个提交应用的节点很可能成为瓶颈。下图中的 Deployer 表示应用提交节点，三角形表示提交作业时客户端需要做的工作。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-application-1.png"></p>
<p>为了减轻 Deployer 的负载压力，Flink 社区在 per-job 模式的基础上实现了 application mode。</p>
<h2 id="03-Application-Mode-实现原理"><a href="#03-Application-Mode-实现原理" class="headerlink" title="03.Application Mode 实现原理"></a>03.Application Mode 实现原理</h2><p>如下图所示，application mode 将客户端的工作负载转移到了 jobmanager 中（即在 jobmanager 中执行应用 main 方法），客户端仅负责发送作业提交请求，工作负载很轻，即使大量应用同时提交，也不会给 Deployer 造成太大的压力。并且，application mode 会为每一个 application 单独创建一个 Flink 集群，这意味着每一个 application 独享一个 jobmanager，从而 jobmanager 也不会因为承担了部分客户端的工作而造成负载过大。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-application-2.png"></p>
<p>和 per-job mode 相比，application mode 允许一个 application 中包含多个 job，job 的执行顺序和启动 job 的命令有关。当使用阻塞式的 execute 命令来提交 job 时，job 是顺序执行的，下一个 job 会在上一个 job 执行完成之后才会提交。当使用非阻塞式的 executeAsync 命令来提交 job 时，下一个 job 在上一个 job 提交之后会立即提交，无需等待上个 job 的完成，也就是说多个 job 可以同时运行。</p>
<p><strong>需要注意一点</strong>：由于 application mode 下，应用的 main 方法在 jobmanager 中执行，所以要保证用户代码访问的外部资源在 jobmanager 中是可以访问到的。 例如，当用户代码使用 registerCachedFile 方法来注册资源时，这个资源要能被 jobmanager 访问。</p>
<h2 id="04-进一步减少网络资源"><a href="#04-进一步减少网络资源" class="headerlink" title="04.进一步减少网络资源"></a>04.进一步减少网络资源</h2><p>以 application mode on yarn 为例，当提交一个 application mode 的应用时，客户端不仅需要传输用户 jar 到 jobmanager，还需要将 Flink 的二进制包上传到 Yarn ，用于启动 Flink 集群。对客户端来说，这两个传输工作也要占用相当的带宽资源。并且，每次提交应用都上传一份相同的 Flink 二进制包到 Yarn 上不仅浪费带宽，也浪费存储空间，Flink 1.11 正是从由此出发，对 Flink on Yarn 做了如下两点优化：</p>
<ol>
<li>通过一个远程路径来指定启动 Flink 集群所需的二进制包；</li>
<li>通过一个远程路径来指定应用 jar；</li>
</ol>
<p>通过第一个优化点，提交应用时就不必重复上传 Flink 依赖了 ，直接从远程路径拉去即可。并且，由于 yarn 的缓存机制，如果之前一个 nodemanager 上启动过 Flink 进程，当再次启动时，Flink 依赖可直接从本地缓存中读取，进一步加快了应用的提交过程。</p>
<p>需要知道的是，上述两点优化并不只针对于 application mode on yarn，而是适用于 Flink on Yarn 中的所有应用提交模式。</p>
<h2 id="05-Application-Mode-on-Yarn-示例"><a href="#05-Application-Mode-on-Yarn-示例" class="headerlink" title="05.Application Mode on Yarn 示例"></a>05.Application Mode on Yarn 示例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/flink run-application -t yarn-application \</span><br><span class="line">-Djobmanager.memory.process.size=2048m \</span><br><span class="line">-Dtaskmanager.memory.process.size=4096m \</span><br><span class="line">-Dyarn.provided.lib.dirs=&quot;hdfs://myhdfs/remote-flink-dist-dir&quot; \</span><br><span class="line">hdfs://myhdfs/jars/MyApplication.jar</span><br></pre></td></tr></table></figure>

<h2 id="06-Application-Mode-on-k8s-示例"><a href="#06-Application-Mode-on-k8s-示例" class="headerlink" title="06.Application Mode on k8s 示例"></a>06.Application Mode on k8s 示例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/flink run-application -p 8 -t kubernetes-application \</span><br><span class="line">-Dkubernetes.cluster-id=&lt;ClusterId&gt; \</span><br><span class="line">-Dtaskmanager.memory.process.size=4096m \</span><br><span class="line">-Dkubernetes.taskmanager.cpu=2 \</span><br><span class="line">-Dtaskmanager.numberOfTaskSlots=4 \</span><br><span class="line">-Dkubernetes.container.image=&lt;CustomImageName&gt; \</span><br><span class="line">local:///opt/flink/usrlib/my-flink-job.jar</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：在 Flink 1.11 中，当使用 application mode on k8s 时，只能通过 local 协议来指定应用 jar 包，这意味着必须将应用 jar 包打到 Flink 镜像中。</p>
<h2 id="07-参考资料"><a href="#07-参考资料" class="headerlink" title="07.参考资料"></a>07.参考资料</h2><ul>
<li><a href="https://flink.apache.org/news/2020/07/14/application-mode.html">Application Deployment in Flink: Current State and the new Application Mode</a></li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/deployment/yarn_setup.html#run-an-application-in-application-mode">Run an application in Application Mode</a></li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/deployment/native_kubernetes.html#flink-kubernetes-application">Flink Kubernetes Application</a></li>
<li><a href="https://www.jianshu.com/p/90d9f1f24937">Flink on YARN的第三种部署模式：Application Mode</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/160800648">探究 flink1.11 Application 模式</a></li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink 1.11.0 维表 join 条件中包含 UDF 时执行出错</title>
    <url>/2020/07/12/flink/Flink%201.11.0%20%E7%BB%B4%E8%A1%A8%20join%20%E6%9D%A1%E4%BB%B6%E4%B8%AD%E5%8C%85%E5%90%AB%20UDF%20%E6%97%B6%E6%89%A7%E8%A1%8C%E5%87%BA%E9%94%99/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-背景"><a href="#01-背景" class="headerlink" title="01.背景"></a>01.背景</h2><p>当 flink 1.11.0 执行如下 sql 时报错：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.id, t1.product, t2.price <span class="keyword">from</span> table1 <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">join</span> table2 <span class="keyword">for</span> <span class="built_in">system_time</span> <span class="keyword">as</span> <span class="keyword">of</span> t1.proctime <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.id <span class="operator">=</span> t2.id <span class="keyword">where</span> <span class="built_in">current_date</span> <span class="operator">=</span> t2.sell_date</span><br></pre></td></tr></table></figure>

<h2 id="02-排查"><a href="#02-排查" class="headerlink" title="02.排查"></a>02.排查</h2><p>出错位置位于 <code>CommonLookupJoin#extractConstantField</code>，原因是 RexCall 类型匹配不上，可以在该方法的 match 语句中增加 <code>case _ =&gt; return</code> 来解决该问题。</p>
<h2 id="03-补充"><a href="#03-补充" class="headerlink" title="03.补充"></a>03.补充</h2><p><a href="https://issues.apache.org/jira/browse/FLINK-18212">FLINK-18212</a> 已经提出并解决了该问题</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink 1.11.0 连接 postgre 的问题</title>
    <url>/2020/10/27/flink/Flink%201.11.0%20%E8%BF%9E%E6%8E%A5%20postgre%20%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-问题描述"><a href="#01-问题描述" class="headerlink" title="01.问题描述"></a>01.问题描述</h2><p>pg 中有一张 pg_sink 表，结构如下：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>Name</td>
<td>VARCHAR</td>
</tr>
<tr>
<td>address</td>
<td>VARCHAR</td>
</tr>
<tr>
<td>work</td>
<td>VARCHAR</td>
</tr>
</tbody></table>
<p>使用 Flink 1.11.0 执行如下 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> pg_sink (</span><br><span class="line">	Name <span class="type">VARCHAR</span>,</span><br><span class="line">	address <span class="type">VARCHAR</span>,</span><br><span class="line">	work <span class="type">VARCHAR</span></span><br><span class="line">) <span class="keyword">with</span> (</span><br><span class="line">    <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;jdbc&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;jdbc:postgresql://***:***/***&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;table-name&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;pg_sink&#x27;</span>,</span><br><span class="line">	...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> kafka_source(</span><br><span class="line">    Name <span class="type">VARCHAR</span>,</span><br><span class="line">    address <span class="type">VARCHAR</span>,</span><br><span class="line">    work <span class="type">VARCHAR</span></span><br><span class="line">) <span class="keyword">with</span> (</span><br><span class="line">    <span class="string">&#x27;connector.type&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;kafka&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;format.type&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">	...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pg_sink </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> kafka_source;</span><br></pre></td></tr></table></figure>

<p>上述 SQL 任务运行失败，错误信息如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Caused by: org.postgresql.util.PSQLException: ERROR: column &quot;Name&quot; of relation &quot;pg_sink&quot; does not exist</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="02-原因分析"><a href="#02-原因分析" class="headerlink" title="02.原因分析"></a>02.原因分析</h2><p>参考《<a href="https://www.cnblogs.com/kaituorensheng/p/5445696.html">PostgreSQL 对字段大小写敏感</a>》，《<a href="https://blog.csdn.net/LittleGlassHeart/article/details/102566867">PostgreSQL 中的单引号与双引号</a>》</p>
<h2 id="03-如何解决"><a href="#03-如何解决" class="headerlink" title="03.如何解决"></a>03.如何解决</h2><p><code>org.apache.flink.connector.jdbc.dialect.JdbcDialect#quoteIdentifier</code> 方法会对 SQL 中的字段加上双引号，而 <code>org.apache.flink.connector.jdbc.dialect.PostgresDialect#quoteIdentifier</code> 方法则不会对字段做出处理。所以，只需删除 <code>PostgresDialect#quoteIdentifier</code> 方法，让 <code>JdbcDialect#quoteIdentifier</code> 方法生效即可解决上述问题。</p>
<h2 id="04-补充说明"><a href="#04-补充说明" class="headerlink" title="04.补充说明"></a>04.补充说明</h2><p>这种处理方式会引起其他问题，举例解释下：</p>
<ul>
<li>schemax.tablex： Schema 名为 schemax，表名为 tablex </li>
<li>“schemax.tablex”：表名为 schemax.tablex</li>
</ul>
<p>所以，如果给标识符直接加上双引号，就没法区分 PG 的 Schema 了。关于该问题的更多讨论可参见 <a href="https://issues.apache.org/jira/browse/FLINK-19829">FLINK-19829</a>、<a href="https://issues.apache.org/jira/browse/FLINK-18640">FLINK-18640</a>。</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink 1.11 新特性：Application 部署模式</title>
    <url>/2020/05/11/flink/Flink%20SQL%20%E4%B8%AD%E6%97%B6%E9%97%B4%E6%88%B3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-异常案例"><a href="#01-异常案例" class="headerlink" title="01.异常案例"></a>01.异常案例</h2><p>先来看一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"><span class="type">EnvironmentSettings</span> <span class="variable">bsSettings</span> <span class="operator">=</span> EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();</span><br><span class="line"><span class="type">StreamTableEnvironment</span> <span class="variable">bsTableEnv</span> <span class="operator">=</span> StreamTableEnvironment.create(env, bsSettings);</span><br><span class="line">bsTableEnv.executeSql(<span class="string">&quot;create table pt (tfield timestamp) with ( &#x27;connector&#x27; = &#x27;print&#x27;)&quot;</span>);</span><br><span class="line">bsTableEnv.executeSql(<span class="string">&quot;insert into pt values (1611884521000)&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>执行上述代码时会发生如下异常：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; org.apache.flink.table.api.ValidationException: Column types of query result and sink for registered table &#x27;default_catalog.default_database.pt&#x27; do not match.</span><br><span class="line">Cause: Incompatible types for sink column &#x27;tfield&#x27; at position 0.</span><br><span class="line"></span><br><span class="line">Query schema: [EXPR$0: BIGINT NOT NULL]</span><br><span class="line">Sink schema:  [tfield: TIMESTAMP(6)]</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>异常信息提示的很明确，问题原因是字段类型不匹配。</p>
<h2 id="02-原因说明"><a href="#02-原因说明" class="headerlink" title="02.原因说明"></a>02.原因说明</h2><p>上述案例之所以会发生字段类型不匹配，原因在于 Flink 中对 Timestamp 的定义。与一般的认知不同，Flink 中的 Timestamp 不是一个 13 位的长整形数字，而是一个 <strong>2021-01-29T09:42:01</strong> 样式的日期。所以在使用 Flink SQL 时，直接将长整形的字段类型定义为 Timestamp 会发生异常。</p>
<h2 id="03-正确案例"><a href="#03-正确案例" class="headerlink" title="03.正确案例"></a>03.正确案例</h2><p>在 Flink 中，如果想把 13 位的长整形数字当做时间戳来用的话，需要先将其转换为 Flink 中的时间戳，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"><span class="type">EnvironmentSettings</span> <span class="variable">bsSettings</span> <span class="operator">=</span> EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();</span><br><span class="line"><span class="type">StreamTableEnvironment</span> <span class="variable">bsTableEnv</span> <span class="operator">=</span> StreamTableEnvironment.create(env, bsSettings);</span><br><span class="line"></span><br><span class="line">bsTableEnv.executeSql(<span class="string">&quot;create table pt (tfield timestamp) with ( &#x27;connector&#x27; = &#x27;print&#x27;)&quot;</span>);</span><br><span class="line">bsTableEnv.executeSql(<span class="string">&quot;insert into pt values (TO_TIMESTAMP(FROM_UNIXTIME(1611884521000 / 1000, &#x27;yyyy-MM-dd HH:mm:ss&#x27;)))&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>而如果需要在 DDL 中完成上述操作，可以先将原始 13 位数字字段定义为 BIGINT，然后使用计算列将其转换为 Timestamp，示例代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1 (</span><br><span class="line">	long_ts_field <span class="type">BIGINT</span>,</span><br><span class="line">    ts_field <span class="keyword">as</span> TO_TIMESTAMP(FROM_UNIXTIME(long_ts_field <span class="operator">/</span> <span class="number">1000</span>, <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>)),</span><br><span class="line">    ...</span><br><span class="line">) <span class="keyword">with</span> (</span><br><span class="line">	...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="04-了解更多"><a href="#04-了解更多" class="headerlink" title="04.了解更多"></a>04.了解更多</h2><p>如果想了解更多与 Flink 时间戳有关的知识，可参考如下链接：<a href="https://blog.csdn.net/zhangdongan1991/article/details/105796613">《Flink SQL中Timestamp使用的坑》</a>、<a href="https://nightlies.apache.org/flink/flink-docs-release-1.11/dev/table/types.html#date-and-time">《Flink 中 Date 和 Time 类型介绍》</a>；如果想了解 Flink 内置的时间转换函数，可参考如下链接：<a href="https://nightlies.apache.org/flink/flink-docs-release-1.11/dev/table/functions/systemFunctions.html#temporal-functions">《Flink Temporal Functions》</a>；</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink SQL 如何实现一行转多行</title>
    <url>/2020/04/12/flink/Flink%20SQL%20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E8%A1%8C%E8%BD%AC%E5%A4%9A%E8%A1%8C/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-问题描述"><a href="#01-问题描述" class="headerlink" title="01.问题描述"></a>01.问题描述</h2><p>用户的数据记录中包含多个字段，并且某个字段的内容是一个结构复杂的 <code>json</code>，现在要提取 <code>json</code> 中的数据，与其他字段组成一条或多条记录输出。</p>
<h2 id="02-如何解决"><a href="#02-如何解决" class="headerlink" title="02.如何解决"></a>02.如何解决</h2><p>Flink 中的 UDTF 可以实现一行数据到多行数据的转换，下面以《<a href="https://baijiahao.baidu.com/s?id=1651693041743099274&wfr=spider&for=pc">Flink SQL 中TableFunction使用分析</a>》中的示例来演示下如何自定义 UDTF。假设输入数据格式如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-udtf-1.png"></p>
<p>要求通过 flink sql 输出如下格式数据：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-udtf-2.png"></p>
<p>此时 UDTF 的实现为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUDTF</span> <span class="keyword">extends</span> <span class="title class_">TableFunction</span>&lt;Row&gt; &#123;</span><br><span class="line">    <span class="meta">@FunctionHint(output = @DataTypeHint(&quot;Row&lt;type String, value String&gt;&quot;))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eval</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> JSONArray.parseArray(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; jsonArray.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> jsonArray.getJSONObject(i);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">            collect(Row.of(type, value));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面给出了这个 UDTF 的测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">    <span class="type">EnvironmentSettings</span> <span class="variable">settings</span> <span class="operator">=</span> EnvironmentSettings</span><br><span class="line">            .newInstance()</span><br><span class="line">            .inStreamingMode()</span><br><span class="line">            .useBlinkPlanner()</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="type">StreamTableEnvironment</span> <span class="variable">tEnv</span> <span class="operator">=</span> StreamTableEnvironment.create(env, settings);</span><br><span class="line"></span><br><span class="line">    List&lt;Row&gt; sourceData = Collections.singletonList(Row.of(</span><br><span class="line">            <span class="string">&quot;dev01&quot;</span>,</span><br><span class="line">            <span class="string">&quot;1574944573000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[&#123;\&quot;type\&quot;:\&quot;temperature\&quot;,\&quot;value\&quot;:\&quot;10\&quot;&#125;,&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#123;\&quot;type\&quot;:\&quot;battery\&quot;,\&quot;value\&quot;:\&quot;1\&quot;&#125;]&quot;</span>));</span><br><span class="line"></span><br><span class="line">    DataStreamSource&lt;Row&gt; rowDataStreamSource = env.fromCollection(sourceData);</span><br><span class="line">    <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> tEnv.fromDataStream(rowDataStreamSource, $(<span class="string">&quot;devid&quot;</span>), $(<span class="string">&quot;time&quot;</span>), $(<span class="string">&quot;data&quot;</span>));</span><br><span class="line">    tEnv.createTemporaryView(<span class="string">&quot;source&quot;</span>, table);</span><br><span class="line">    tEnv.createTemporarySystemFunction(<span class="string">&quot;my_udtf&quot;</span>, MyUDTF.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">TableResult</span> <span class="variable">tableResult</span> <span class="operator">=</span> tEnv.executeSql(<span class="string">&quot;select `devid`, `time`, `type`, `value` &quot;</span> +</span><br><span class="line">            <span class="string">&quot;from source, lateral table(my_udtf(data)) as t(`type`,`value`)&quot;</span>);</span><br><span class="line">    tableResult.print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink 使用 FTP 作为 Checkpoint 文件系统</title>
    <url>/2020/06/29/flink/Flink%20%E4%BD%BF%E7%94%A8%20FTP%20%E4%BD%9C%E4%B8%BA%20Checkpoint%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-背景说明"><a href="#01-背景说明" class="headerlink" title="01.背景说明"></a>01.背景说明</h2><p><code>Flink Job</code> 在运行失败时，可以从上一个 <code>checkpoint</code> 进行恢复，不过这有一个前提，就是 <code>checkpoint</code> 数据对所有的 <code>Task</code> 来说都是可以访问的。通常，我们会将 <code>checkpoint</code> 目录设置为 <code>HDFS</code>，但在一些轻量级的生产场景中是没有部署 <code>HDFS</code> 的，所以考虑使用 <code>FTP</code> 来保存 <code>checkpoint</code> 数据。</p>
<h2 id="02-实现思路"><a href="#02-实现思路" class="headerlink" title="02.实现思路"></a>02.实现思路</h2><p><code>Flink</code> 可以使用 <code>HDFS</code> 作为 <code>checkpoint</code> 目录的原因是 <code>Flink</code> 支持 <code>HDFS</code> 文件系统，所以如果 <code>Flink</code> 可以支持 <code>FTP</code> 文件系统，那么我们就可以用 <code>FTP</code> 来存储 <code>checkpoint</code> 数据。查看 <code>hadoop</code> 的 <code>hadoop-common</code> 模块，可以发现 <code>FTP</code> 对应的文件系统实现是 <code>FTPFileSystem</code>，而 <code>Flink</code> 文件系统又是兼容 <code>Hadoop</code> 文件系统的，所以只要引入 <code>hadoop-common</code> 模块便可以让 <code>Flink</code> 支持 <code>FTP</code>，不过，为防止类冲突，最好引入 <code>Flink</code> 提供的 <code>flink-shaded-hadoop</code>。</p>
<h2 id="03-实现步骤"><a href="#03-实现步骤" class="headerlink" title="03.实现步骤"></a>03.实现步骤</h2><ul>
<li>将 <code>flink-shaded-hadoop-2-uber-xxx.jar</code> 放到 <code>Flink</code> 的 <code>lib</code> 路径下（必须放到 <code>lib</code> 路径下，打在作业 <code>Jar</code> 中加载不到）；</li>
<li>重启 <code>Flink Standalone</code> 集群;</li>
<li>作业代码中将 checkpoint 目录设置为 ftp，设置方式如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">env.setStateBackend(<span class="keyword">new</span> <span class="title class_">RocksDBStateBackend</span>(<span class="string">&quot;ftp://user:password@ip:port/path&quot;</span>).asInstanceOf[StateBackend])</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="04-问题分析"><a href="#04-问题分析" class="headerlink" title="04.问题分析"></a>04.问题分析</h2><p>提交作业到集群，可以发现 <code>Job</code> 是正常运行的，不过查看 <code>JobManager</code> 的日志可以发现，checkpoint 出错了，错误信息如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/ftp-checkpoint-error.png"></p>
<p>这里给出的错误原因是无法创建 <code>checkpoint</code> 目录，而此时 <code>FTP</code> 服务是正常的，手动创建目录、上传文件都没问题，所以可以排除 <code>FTP</code> 本身的问题。经过代码调试发现，问题是由路径引起的，因为使用 <code>FTPFileSystem</code> 创建目录时，路径必须是 <code>/A/B/C</code> 这样的形式，像 <code>ftp://user:password@ip:port/path</code> 这样的路径是不被 <code>FTPFileSystem</code> 支持的。</p>
<h2 id="05-自定义-FTPFileSystem"><a href="#05-自定义-FTPFileSystem" class="headerlink" title="05.自定义 FTPFileSystem"></a>05.自定义 FTPFileSystem</h2><p>自定义<code>FTPFileSystem</code> 来支持 <code>ftp://user:password@ip:port/path</code>  格式的路径，实现步骤如下：</p>
<p><strong>1.创建一个 Maven 项目，pom 写法如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-shaded-hadoop-2-uber<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.5-10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.google.code.findbugs:jsr305<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org.slf4j:*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>log4j:*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">							<span class="comment">&lt;!-- Do not copy the signatures in the META-INF folder.</span></span><br><span class="line"><span class="comment">							Otherwise, this might cause SecurityExceptions when using the JAR. --&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.复制 <code>FTPFileSystem</code> 到项目中，并将其重命名为 <code>HFTPFileSystem</code></strong></p>
<p><strong>3.修改 <code>HFTPFileSystem</code> 中的 <code>makeabsolute</code> 方法，修改后的方法如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Path <span class="title function_">makeAbsolute</span><span class="params">(Path workDir, Path path)</span> &#123;</span><br><span class="line">	Path absolute;</span><br><span class="line">	<span class="keyword">if</span>(<span class="string">&quot;hftp&quot;</span>.equals(path.toUri().getScheme()))&#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="type">String</span> <span class="variable">pathStr</span> <span class="operator">=</span> path.toUri().getPath().substring(<span class="number">1</span>);</span><br><span class="line">		absolute = <span class="keyword">new</span> <span class="title class_">Path</span>(workDir, pathStr);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (path.isAbsolute()) &#123;</span><br><span class="line">			<span class="keyword">return</span> path;</span><br><span class="line">		&#125;</span><br><span class="line">		absolute = <span class="keyword">new</span> <span class="title class_">Path</span>(workDir, path);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.修改 <code>HFTPFileSystem</code> 中的 <code>getSchema</code> 方法，修改后的方法如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getScheme</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;hftp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5.在 <code>resources/META-INF/services</code> 目录下新建一个名为 <code>org.apache.hadoop.fs.FileSystem</code> 的文件，内容为 <code>HFTPFileSystem</code> 的全路径名</strong></p>
<p><strong>6.将项目打成 <code>jar</code> 包</strong></p>
<h2 id="06-自定义-FTPFileSystem-的使用"><a href="#06-自定义-FTPFileSystem-的使用" class="headerlink" title="06.自定义 FTPFileSystem 的使用"></a>06.自定义 FTPFileSystem 的使用</h2><ul>
<li>将开发好的项目 <code>jar</code> 包放到 <code>Flink</code> 的 <code>lib</code> 路径下（必须放到 <code>lib</code> 路径下，打在作业 <code>jar</code> 中加载不到）；</li>
<li>重启 <code>Flink Standalone</code> 集群；</li>
<li>作业代码中将 <code>checkpoint</code> 目录设置为 <code>ftp</code>，协议头使用 <code>hftp</code>，设置方式如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">env.setStateBackend(<span class="keyword">new</span> <span class="title class_">RocksDBStateBackend</span>(<span class="string">&quot;hftp://user:password@ip:port/path&quot;</span>).asInstanceOf[StateBackend])</span><br></pre></td></tr></table></figure>

<p>此时，提交作业到集群，可以发现 <code>Job</code> 是正常运行的，<code>checkpoint</code> 数据也顺利落地到所配置的 <code>FTP</code> 目录。</p>
<h2 id="07-参考资料"><a href="#07-参考资料" class="headerlink" title="07.参考资料"></a>07.参考资料</h2><ul>
<li><a href="https://blog.csdn.net/weixin_41917987/article/details/90294765">Flink的standalone运行模式之State存储—-不使用HDFS</a></li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink 使用 FTP 作为 Checkpoint 文件系统存在的问题</title>
    <url>/2020/07/05/flink/Flink%20%E4%BD%BF%E7%94%A8%20FTP%20%E4%BD%9C%E4%B8%BA%20Checkpoint%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-背景说明"><a href="#01-背景说明" class="headerlink" title="01.背景说明"></a>01.背景说明</h2><a href="/2020/06/29/flink/Flink%20%E4%BD%BF%E7%94%A8%20FTP%20%E4%BD%9C%E4%B8%BA%20Checkpoint%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/" title="Flink 使用 FTP 作为 Checkpoint 文件系统">Flink 使用 FTP 作为 Checkpoint 文件系统</a> 介绍了如何让 Flink Checkpoint 后端支持 FTP，并实现了此项功能。项目上线后，FTP 作为 Flink Checkpoint 状态后端可以正常工作，但项目运行一段时间后，偶尔在做 Checkpoint 时会出现端口被占用异常，从而出现 Checkpoint 失败，作业重启的问题。

<h2 id="02-问题排查"><a href="#02-问题排查" class="headerlink" title="02.问题排查"></a>02.问题排查</h2><p>首先看下异常发生的位置：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-ftp-checkpoint-failed.png"></p>
<p>下面是我的排查思路：</p>
<ul>
<li>检查机器的端口，发现大量端口处于 time_wait 状态，推测短链接建立太多，机器端口被占用完；</li>
<li>排查代码，<code>_serverSocketFactory_.createServerSocket</code> 绑定的端口是 0，意思是由操作系统分配可用端口，无端口可分配也会抛出端口被占用异常，进一步验证上面猜测；</li>
</ul>
<p>分析出机器端口被占用完，接下来就是找出 FTPClient 中为什么会有大量端口没被释放的问题了。还是回到 <code>_openDataConnection_</code> 方法，在 FTPClient 与 FTP 进行数据交互时，每个数据交互操作都需要调用这个方法，该方法会返回一个与服务端进行数据传输的 Socket，猜想如果这些 Socket 没被关闭，那么就会不断有端口被占用。而跟踪代码可以发现，FTPClient 在用完这些 Socket 后，都及时调用了其 close 方法去关闭连接，所以上面的猜想又进入了死胡同。</p>
<p>在网上查阅相关资料，发现了下面一段描述：<code>socket.close()</code> 操作并不能立即释放绑定的端口，而是把端口设置为 TIME_WAIT 状态，过段时间(默认240s)才释放(用 <code>netstat -na</code> 可以看到)，如果建立短连接的操作较为频繁，可能会导致系统端口资源耗尽。所以，最终确定问题还是在 Socket 的关闭上，既然找到了问题所在，那么在不修改 FTPClient 代码的条件下，可采用如下解决方案：</p>
<ul>
<li>扩大机器可用的端口范围</li>
<li>开启端口的复用与快速回收</li>
</ul>
<p>运维人员按上述方案对操作系统进行设置之后，checkpoint 数据到 FTP 时，未再发生端口被占用问题。</p>
<h2 id="03-参考资料"><a href="#03-参考资料" class="headerlink" title="03.参考资料"></a>03.参考资料</h2><ul>
<li><a href="https://bbs.csdn.net/topics/320024769">请教Address already in use: connect问题</a></li>
<li><a href="https://www.cnblogs.com/dasusu/p/10006899.html">记录 FTPClient 超时处理的相关问题</a></li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink 源码浅析 001：算子内部做了什么</title>
    <url>/2018/05/18/flink/Flink%20%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%20001%EF%BC%9A%E7%AE%97%E5%AD%90%E5%86%85%E9%83%A8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<blockquote>
<p>从读书到工作，断断续续记过一些笔记，但一直没能坚持下来。总结了几个原因：<br>1.嫌弃笔记的排版不美观<del>太丑了，写了自己都不想看<br>2.追求笔记的大而全</del>主题衍生内容繁杂，多到不想写<br>3.懒~显而易见😂</p>
<p>为了能坚持下去，特将本系列文章命名为《浅析》，提醒自己在每篇文章中，尽量用简短的篇幅、简明的语言去大致说清楚一个主题，要更多地关注主干脉络，不要陷在细枝末节中。</p>
<p>闲话少叙，本文我们来看下当调用 Flink 算子的时候，框架内部做了哪些工作。</p>
</blockquote>
<h2 id="有请-Word-Count"><a href="#有请-Word-Count" class="headerlink" title="有请 Word Count"></a>有请 Word Count</h2><p><code>Word Count</code> 之于大数据正如 <code>Hello World</code> 之于编程语言，虽然简单，但执行过程却涉及到底层的诸多方面。下面我们通过一个 <code>Flink Word Count</code> 示例来复习下 <code>Flink</code> 算子的使用，后文将以 <code>flatMap</code> 为例，来探究算子的内部实现。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-word-count.png"></p>
<h2 id="相关概念介绍"><a href="#相关概念介绍" class="headerlink" title="相关概念介绍"></a>相关概念介绍</h2><p>磨刀不误砍柴功，在探索 <code>flatMap</code> 的执行流程之前，先来看下 <code>Flink</code> 作业中的一些抽象，具体包括 <code>Function</code>、<code>StreamOperator</code>、<code>Transformation</code>、<code>DataStream</code>。</p>
<p><strong>1.Function</strong></p>
<p>用户自定义函数的基类，<code>Word Count</code> 示例中的 <code>Tokenizer</code> 实现了 <code>FlatMapFunction</code>，<code>FlatMapFunction</code> 便是 <code>Function</code> 的一个子类</p>
<p><strong>2.StreamOperator</strong></p>
<p><code>Flink</code> 算子在运行时的体现，<code>AbstractUdfStreamOperator</code> 是其一个抽象子类，表示包含 <code>Function</code> 的 <code>StreamOperator</code></p>
<p><strong>3.Transformation</strong></p>
<p>对 <code>DataStream</code> 的转换操作，<code>OneInputTransformation</code> 是其一个子类，包含 <code>OneInputStreamOperator</code></p>
<p><strong>4.DataStream</strong></p>
<p>可以简单将其理解为对 <code>Transformation</code> 和 <code>StreamExecutionEnvironment</code> 的上层封装，<code>SingleOutputStreamOperator</code> 是其一个子类</p>
<h2 id="flatMap-执行流程"><a href="#flatMap-执行流程" class="headerlink" title="flatMap 执行流程"></a>flatMap 执行流程</h2><p><code>flatMap</code> 的调用链如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-method-doTransform.png"></p>
<p><strong>1.获取 <code>FlatMapFunction</code> 的返回类型，然后调用带返回类型的重载方法</strong></p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-method-flatmap-1.png"></p>
<p>调用 <code>flatMap</code> 方法时，如果没有指定返回类型，那么会通过 <code>TypeExtractor</code> 来自动提取返回类型，然后再调用带返回类型的重载方法。</p>
<p>上述代码中有几个有意思的地方有必要了解下：</p>
<ul>
<li><code>clean(flatMapper)</code>：闭包清除。简单解释下，内部类持有外部类的引用，如果外部类不可序列化，那么内部类即使实现了序列化接口，也是无法序列化的，闭包清除就是通过字节码技术，将内部类中持有的外部类引用给清除掉，更多信息可参考：<a href="https://issues.apache.org/jira/browse/FLINK-1325">FLINK-1325</a>；</li>
<li><code>Utils.getCallLocationName()</code>：获取方法的调用位置，该功能是通过 <code>Thread#getStackTrace()</code> 实现的，我们一般很少使用，在框架或工具中用的较多；</li>
<li><code>getFlatMapReturnTypes</code> 的第四个参数：true 表示当提取类型失败时，返回一个 <code>MissingTypeInfo</code> 实例，而不是抛出异常；</li>
</ul>
<p>2.创建 <code>StreamFlatMap</code>，调用 <code>transform</code> 方法</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-datastream-flatmap-2.png"></p>
<p><code>StreamFlatMap</code> 是 <code>AbstractUdfStreamOperator</code> 的子类，在 <code>Flink</code> 作业运行时，每来一条数据，其 <code>processElement</code> 方法会被调用一次，内部其实就是调用 <code>FlatMapFunction</code> 的 <code>flatMap</code> 方法来处理数据。</p>
<p>3.创建 <code>SimpleOperatorFactory</code>，调用 <code>doTransform</code> 方法</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-method-transform.png"></p>
<p><code>SimpleOperatorFactory</code> 是 <code>StreamOperator</code> 的工厂类子类，是对已有 <code>StreamOperator</code> 的封装，可以对 <code>StreamOperator</code> 做一些额外配置，如设置算子链接策略、定时器服务等。</p>
<p>4.实现用户代码到 <code>Transformation</code> 转换的核心逻辑</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-method-doTransform-1.png"></p>
<p>这里进入到创建 <code>Transformation</code> 的核心流程：</p>
<ul>
<li>触发异常：前面我们提到过，<code>TypeExtractor#getFlatMapReturnTypes</code> 方法提取函数的返回类型时，第四个参数用于控制类型提取失败时是否抛出异常，如果为 true，不抛出异常，而是返回 <code>MissingTypeInfo</code>。当前步骤的目的即是用于触发异常，当上一个 <code>Transformation</code> 的输出是 <code>MissingTypeInfo</code> 时，抛出异常；</li>
<li>创建 <code>OneInputTransformation</code>：可以发现，<code>OneInputTransformation</code> 除了包含 <code>StreamOperator</code> 外，还记录了上游 <code>Transformation</code>、输出类型、并行度等信息；</li>
<li>将 <code>Transformation</code> 和 <code>StreamExecutionEnvironment</code> 封装为 <code>DataStream</code>，这里是 <code>SingleOutputStreamOperator</code>；</li>
<li>将 <code>Transformation</code> 记录到 <code>StreamExecutionEnvironment</code>：<code>StreamExecutionEnvironment</code> 有个列表类型的成员变量 <code>transformations</code>，用于顺序记录 <code>Flink</code> 作业中包含的 <code>Transformation</code>，后续将遍历该成员变量来创建 <code>StreamGraph</code>；</li>
<li>返回 DataStream，继续执行转换；</li>
</ul>
<p>熟悉 <code>Flink</code> 的用户应该知道，我们可以调用 <code>setParallelism</code> 方法来指定算子的并行度，其方法实现如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-method-setParallelism.png"></p>
<p>可以发现，这里其实是设置  <code>Transformation</code>  的并行度。并不是所有的 <code>Transformation</code> 都是可以并行的，所以设置之前，会先对并行度的合法性进行校验。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用户算子的执行过程，其实就是创建 <code>Transformation</code> 的过程，这些 <code>Transformation</code> 记录在 <code>StreamExecutionEnvironment</code> 中，后续将基于此来创建 <code>StreamGraph</code>。</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka 单点部署</title>
    <url>/2015/11/15/kafka/Kafka%20%E5%8D%95%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-配置并启动-zk"><a href="#01-配置并启动-zk" class="headerlink" title="01.配置并启动 zk"></a>01.配置并启动 zk</h2><p>进入 conf 目录，将 zoo_sample.cfg 重命名为 zoo.cfg，配置 zoo.cfg 中的 dataDir，然后启动 zk：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/zkServer.sh start</span><br></pre></td></tr></table></figure>

<h2 id="02-配置并启动-kafka"><a href="#02-配置并启动-kafka" class="headerlink" title="02.配置并启动 kafka"></a>02.配置并启动 kafka</h2><p>配置 server.properties 中的 log.dirs，然后启动 kafka：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure>

<h2 id="03-topic-相关命令"><a href="#03-topic-相关命令" class="headerlink" title="03.topic 相关命令"></a>03.topic 相关命令</h2><ul>
<li>创建 topic</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-topics.sh \</span><br><span class="line">--zookeeper localhost:2181 \</span><br><span class="line">--create \</span><br><span class="line">--topic model_topic \</span><br><span class="line">--partitions 3 \</span><br><span class="line">--replication-factor 1</span><br></pre></td></tr></table></figure>

<ul>
<li>查看 topic</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-topics.sh \</span><br><span class="line">--zookeeper localhost:2181 \</span><br><span class="line">--list</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kakfa</category>
      </categories>
      <tags>
        <tag>kakfa</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 常用配置</title>
    <url>/2015/06/16/tool/CentOS%20%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-关闭防火墙"><a href="#01-关闭防火墙" class="headerlink" title="01.关闭防火墙"></a>01.关闭防火墙</h2><p>查看防火墙状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure>

<p>关闭防火墙：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<p>关闭防火墙开机自启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<h2 id="02-配置-DNS-服务器"><a href="#02-配置-DNS-服务器" class="headerlink" title="02.配置 DNS 服务器"></a>02.配置 DNS 服务器</h2><p>配置 <code>/etc/resolv.conf</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure>

<h2 id="03-配置国内-yum-源"><a href="#03-配置国内-yum-源" class="headerlink" title="03.配置国内 yum 源"></a>03.配置国内 yum 源</h2><p>进入 <a href="https://developer.aliyun.com/mirror/">阿里巴巴开源镜像站</a>，点击 centos，进入镜像使用的详情页，按照页面的指导进行相应配置。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/aliyun_mirror.png"></p>
<p>例如，为 CentOS 7 配置阿里云的 yum 源，具体操作如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份数据</span></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载配置</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h2 id="04-配置机器之间的-SSH-免密登录"><a href="#04-配置机器之间的-SSH-免密登录" class="headerlink" title="04.配置机器之间的 SSH 免密登录"></a>04.配置机器之间的 SSH 免密登录</h2><p>生成密钥：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果A需要SSH免密登录到其他机器，那么在A上执行下面的命令</span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>授权：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果A需要SSH免密登录B，那么在A上执行下面的命令</span></span><br><span class="line">ssh-copy-id B</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在A上执行下面的命令</span></span><br><span class="line">ssh B</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果 ssh-copy-id 命令不存在，则需要执行下面命令安装 openssh-clients：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：涉及免密登录的每台机器都得安装openssh-clients</span></span><br><span class="line">sudo yum install -y openssh-clients</span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Git for windows 中文乱码解决办法</title>
    <url>/2016/03/11/tool/Git%20for%20windows%20%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-问题"><a href="#01-问题" class="headerlink" title="01.问题"></a>01.问题</h2><p><code>git status</code> 时显示乱码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\316\304\261\276\316\304\265\265.txt</span><br></pre></td></tr></table></figure>

<h2 id="02-解决"><a href="#02-解决" class="headerlink" title="02.解决"></a>02.解决</h2><p>执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="03-参考"><a href="#03-参考" class="headerlink" title="03.参考"></a>03.参考</h2><ul>
<li><a href="https://www.cnblogs.com/ayseeing/p/4203679.html">Git for windows 中文乱码解决方案</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 的 Next 主题美化</title>
    <url>/2022/06/06/tool/Hexo%20%E7%9A%84%20Next%20%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-NexT-主题的下载与安装"><a href="#01-NexT-主题的下载与安装" class="headerlink" title="01.NexT 主题的下载与安装"></a>01.NexT 主题的下载与安装</h2><ul>
<li>下载 <a href="https://github.com/theme-next/hexo-theme-next/releases">NexT</a> 主题并将其解压到博客的 themes 目录下，修改名称为 next；</li>
<li>修改博客根目录下的 _config.yml，将 theme 项设置为 next;</li>
</ul>
<h2 id="02-设置-NexT-主题样式"><a href="#02-设置-NexT-主题样式" class="headerlink" title="02.设置 NexT 主题样式"></a>02.设置 NexT 主题样式</h2><p>编辑 next 主题目录下的 _config.yml 文件，打开相应 schema 的注释，细节如下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

<h2 id="03-设置-Hexo-使用中文"><a href="#03-设置-Hexo-使用中文" class="headerlink" title="03.设置 Hexo 使用中文"></a>03.设置 Hexo 使用中文</h2><p>编辑博客根目录下的 _config.yml 文件，修改 language 项，细节如下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>

<h2 id="04-设置-NexT-主题头像"><a href="#04-设置-NexT-主题头像" class="headerlink" title="04.设置 NexT 主题头像"></a>04.设置 NexT 主题头像</h2><p>编辑 next 主题目录下的 _config.yml 文件，具体设置如下（<code>images</code> 位于 <code>themes/next/source</code> 下）。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># 头像图片</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/gakki.png</span></span><br><span class="line">  <span class="comment"># 头像为圆形</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 鼠标移动到头像时，头像旋转</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="05-设置博客标题、作者信息"><a href="#05-设置博客标题、作者信息" class="headerlink" title="05.设置博客标题、作者信息"></a>05.设置博客标题、作者信息</h2><p>编辑博客根目录下的 _config.yml 文件，具体设置如下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Leo&#x27;s</span> <span class="string">Blog</span> <span class="comment">#标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;坐标杭州，卖马为生&#x27;</span> <span class="comment">#子标题</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Leo</span> <span class="comment">#作者信息</span></span><br></pre></td></tr></table></figure>

<h2 id="06-设置博客动态背景"><a href="#06-设置博客动态背景" class="headerlink" title="06.设置博客动态背景"></a>06.设置博客动态背景</h2><p>启用 three 背景的方式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.进入 next 主题目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">themes/next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.拉取 three 背景依赖</span></span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-three</span> <span class="string">source/lib/three</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.编辑 next 主题目录下的 _config.yml 文件</span></span><br><span class="line"><span class="attr">three:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">three_waves:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>启用 canvas-nest 背景的方式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.进入 next 主题目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">themes/next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.拉取 canvas-next 背景依赖</span></span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-canvas-nest</span> <span class="string">source/lib/canvas-nest</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.编辑 next 主题目录下的 _config.yml 文件</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># Display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;0,0,255&quot;</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># The opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">150</span> <span class="comment"># The number of lines, default 99</span></span><br></pre></td></tr></table></figure>

<p>启用 canvas-ribbon 背景的方式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.进入 next 主题目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">themes/next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.拉取 canvas-ribbon 背景依赖</span></span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-canvas-ribbon</span> <span class="string">source/lib/canvas-ribbon</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.编辑 next 主题目录下的 _config.yml 文件</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示1：要删除 clone 下来的依赖包中的 .git 文件夹</p>
<p>提示2：如果下载的依赖无法提交到 github，则可能是由 next 目录下的 .gitignore 引起的</p>
<p>提示3：我使用的动态背景是 canvas-nest</p>
</blockquote>
<h2 id="07-设置页面加载效果"><a href="#07-设置页面加载效果" class="headerlink" title="07.设置页面加载效果"></a>07.设置页面加载效果</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.进入 next 主题目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">themes/next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.拉取 three 背景依赖</span></span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-pace</span> <span class="string">source/lib/pace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.编辑 next 主题目录下的 _config.yml 文件</span></span><br><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom </span></span><br><span class="line">  <span class="comment"># center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash </span></span><br><span class="line">  <span class="comment"># loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">center-atom</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示1：要删除 clone 下来的依赖包中的 .git 文件夹</p>
<p>提示2：如果下载的依赖无法提交到 github，则可能是由 next 目录下的 .gitignore 引起的</p>
</blockquote>
<h2 id="08-设置鼠标点击特效"><a href="#08-设置鼠标点击特效" class="headerlink" title="08.设置鼠标点击特效"></a>08.设置鼠标点击特效</h2><p>首先在 themes&#x2F;next&#x2F;source&#x2F;js&#x2F;src 里面建一个叫 fireworks.js 的文件（<code>src</code> 文件夹需要自己创建），代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">function</span> <span class="title function_">updateCoords</span>(<span class="params">e</span>)&#123;pointerX=(e.<span class="property">clientX</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>)-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>,pointerY=e.<span class="property">clientY</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>&#125;<span class="keyword">function</span> <span class="title function_">setParticuleDirection</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> t=anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">360</span>)*<span class="title class_">Math</span>.<span class="property">PI</span>/<span class="number">180</span>,a=anime.<span class="title function_">random</span>(<span class="number">50</span>,<span class="number">180</span>),n=[-<span class="number">1</span>,<span class="number">1</span>][anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.<span class="property">x</span>+n*<span class="title class_">Math</span>.<span class="title function_">cos</span>(t),<span class="attr">y</span>:e.<span class="property">y</span>+n*<span class="title class_">Math</span>.<span class="title function_">sin</span>(t)&#125;&#125;<span class="keyword">function</span> <span class="title function_">createParticule</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=colors[anime.<span class="title function_">random</span>(<span class="number">0</span>,colors.<span class="property">length</span>-<span class="number">1</span>)],a.<span class="property">radius</span>=anime.<span class="title function_">random</span>(<span class="number">16</span>,<span class="number">32</span>),a.<span class="property">endPos</span>=<span class="title function_">setParticuleDirection</span>(a),a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">fillStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">fill</span>()&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">createCircle</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=<span class="string">&quot;#F00&quot;</span>,a.<span class="property">radius</span>=<span class="number">0.1</span>,a.<span class="property">alpha</span>=<span class="number">0.5</span>,a.<span class="property">lineWidth</span>=<span class="number">6</span>,a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="property">globalAlpha</span>=a.<span class="property">alpha</span>,ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">lineWidth</span>=a.<span class="property">lineWidth</span>,ctx.<span class="property">strokeStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">stroke</span>(),ctx.<span class="property">globalAlpha</span>=<span class="number">1</span>&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">renderParticule</span>(<span class="params">e</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.<span class="property">animatables</span>.<span class="property">length</span>;t++)&#123;e.<span class="property">animatables</span>[t].<span class="property">target</span>.<span class="title function_">draw</span>()&#125;&#125;<span class="keyword">function</span> <span class="title function_">animateParticules</span>(<span class="params">e,t</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="title function_">createCircle</span>(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class="title function_">push</span>(<span class="title function_">createParticule</span>(e,t))&#125;anime.<span class="title function_">timeline</span>().<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">x</span>&#125;,<span class="attr">y</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">y</span>&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.<span class="title function_">random</span>(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> n=<span class="variable language_">this</span>,i=<span class="variable language_">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;e.<span class="title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;canvasEl.<span class="property">width</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerWidth</span>,canvasEl.<span class="property">height</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerHeight</span>,canvasEl.<span class="property">style</span>.<span class="property">width</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="property">style</span>.<span class="property">height</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">scale</span>(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=<span class="title function_">anime</span>(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,canvasEl.<span class="property">width</span>,canvasEl.<span class="property">height</span>)&#125;&#125;);<span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(tap,<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="string">&quot;sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;(render.<span class="title function_">play</span>(),<span class="title function_">updateCoords</span>(e),<span class="title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="number">1</span>),<span class="title function_">setCanvasSize</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">&quot;use strict&quot;</span>;<span class="keyword">function</span> <span class="title function_">updateCoords</span>(<span class="params">e</span>)&#123;pointerX=(e.<span class="property">clientX</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>)-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>,pointerY=e.<span class="property">clientY</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>&#125;<span class="keyword">function</span> <span class="title function_">setParticuleDirection</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> t=anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">360</span>)*<span class="title class_">Math</span>.<span class="property">PI</span>/<span class="number">180</span>,a=anime.<span class="title function_">random</span>(<span class="number">50</span>,<span class="number">180</span>),n=[-<span class="number">1</span>,<span class="number">1</span>][anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.<span class="property">x</span>+n*<span class="title class_">Math</span>.<span class="title function_">cos</span>(t),<span class="attr">y</span>:e.<span class="property">y</span>+n*<span class="title class_">Math</span>.<span class="title function_">sin</span>(t)&#125;&#125;<span class="keyword">function</span> <span class="title function_">createParticule</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=colors[anime.<span class="title function_">random</span>(<span class="number">0</span>,colors.<span class="property">length</span>-<span class="number">1</span>)],a.<span class="property">radius</span>=anime.<span class="title function_">random</span>(<span class="number">16</span>,<span class="number">32</span>),a.<span class="property">endPos</span>=<span class="title function_">setParticuleDirection</span>(a),a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">fillStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">fill</span>()&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">createCircle</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=<span class="string">&quot;#F00&quot;</span>,a.<span class="property">radius</span>=<span class="number">0.1</span>,a.<span class="property">alpha</span>=<span class="number">0.5</span>,a.<span class="property">lineWidth</span>=<span class="number">6</span>,a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="property">globalAlpha</span>=a.<span class="property">alpha</span>,ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">lineWidth</span>=a.<span class="property">lineWidth</span>,ctx.<span class="property">strokeStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">stroke</span>(),ctx.<span class="property">globalAlpha</span>=<span class="number">1</span>&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">renderParticule</span>(<span class="params">e</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.<span class="property">animatables</span>.<span class="property">length</span>;t++)&#123;e.<span class="property">animatables</span>[t].<span class="property">target</span>.<span class="title function_">draw</span>()&#125;&#125;<span class="keyword">function</span> <span class="title function_">animateParticules</span>(<span class="params">e,t</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="title function_">createCircle</span>(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class="title function_">push</span>(<span class="title function_">createParticule</span>(e,t))&#125;anime.<span class="title function_">timeline</span>().<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">x</span>&#125;,<span class="attr">y</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">y</span>&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.<span class="title function_">random</span>(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> n=<span class="variable language_">this</span>,i=<span class="variable language_">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;e.<span class="title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;canvasEl.<span class="property">width</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerWidth</span>,canvasEl.<span class="property">height</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerHeight</span>,canvasEl.<span class="property">style</span>.<span class="property">width</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="property">style</span>.<span class="property">height</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">scale</span>(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=<span class="title function_">anime</span>(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,canvasEl.<span class="property">width</span>,canvasEl.<span class="property">height</span>)&#125;&#125;);<span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(tap,<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="string">&quot;sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;(render.<span class="title function_">play</span>(),<span class="title function_">updateCoords</span>(e),<span class="title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="number">1</span>),<span class="title function_">setCanvasSize</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure>

<p>打开 themes&#x2F;next&#x2F;layout&#x2F;_layout.swig ,在 <code>&lt;/body&gt;</code> 标签上方添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.fireworks %&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;fireworks&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!-- js 脚本的地址需要根据具体情况进行调整 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/fireworks.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>打开 themes&#x2F;next&#x2F;_config.yml，在文件末尾添加如下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fireworks</span></span><br><span class="line"><span class="attr">fireworks:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示1：如果 src 目录不存在，则需要手动创建</p>
<p>提示2：在 _layout.swig 中添加代码时，注意是否需要调整 js 脚本的路径。如果博客的 root 地址是 &#x2F; 则无需修改，如过博客的 root 地址是 &#x2F;blog&#x2F;，则 js 脚本的地址前面就需要加上 &#x2F;blog </p>
</blockquote>
<h2 id="09-取消目录中标题自动编号"><a href="#09-取消目录中标题自动编号" class="headerlink" title="09.取消目录中标题自动编号"></a>09.取消目录中标题自动编号</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，具体配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<h2 id="10-隐藏页面底部文字"><a href="#10-隐藏页面底部文字" class="headerlink" title="10.隐藏页面底部文字"></a>10.隐藏页面底部文字</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，具体配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line"><span class="attr">powered:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>打开 <code>themes/next/layout/_partials/footer.swig</code>，注释掉如下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;div class=&quot;copyright&quot;&gt;</span></span><br><span class="line"><span class="comment">  ......</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="11-设置博客页面透明度"><a href="#11-设置博客页面透明度" class="headerlink" title="11.设置博客页面透明度"></a>11.设置博客页面透明度</h2><p>打开 themes\next\source\css\_schemes\Pisces\_layout.styl</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开 themes\next\source\css\_schemes\Gemini\index.styl</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-block</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comments</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pagination</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开 themes\next\source\css\_schemes\Pisces\_sidebar.styl</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="12-显示文章阅读进度"><a href="#12-显示文章阅读进度" class="headerlink" title="12.显示文章阅读进度"></a>12.显示文章阅读进度</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，具体配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会在 back2top 按钮上显示阅读百分比</span></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 会在页面上方显示一个阅读进度条</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：没必要都开启，我选择在 back2top 按钮上显示阅读百分比</p>
</blockquote>
<h2 id="13-启用本地搜索"><a href="#13-启用本地搜索" class="headerlink" title="13.启用本地搜索"></a>13.启用本地搜索</h2><p>在 <code>.github/workflows/pages.yml</code> 中添加如下配置（需要注意添加的位置）：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/install-hexo-generator-searchdb.png"></p>
<p>编辑博客根目录下的 _config.yml 文件，在底部添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Searh</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>

<p>打开 themes&#x2F;next&#x2F;_config.yml，启用本地搜索功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="14-启用标签页"><a href="#14-启用标签页" class="headerlink" title="14.启用标签页"></a>14.启用标签页</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，启用标签页：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<p>在博客根目录的 source 文件夹下创建一个名为 tags 的文件夹，在 tags 文件夹下创建一个 index.md 文件，文件内容如代码块所示，需要注意的是 type 的值必须写 tags，title 是标签页的标题，可以随意起（建议直接删掉 title，标签页有标题不美观）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签 </span><br><span class="line">date: 2020-01-28 17:40:00</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>给文章添加标签非常简单，不需要用户去将标签预先创建出来，只要在文章开头的描述内容中指定，相关标签就会自动生成。如下方代码块所示，这里为文章打了两个标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 的 NexT 主题美化</span><br><span class="line">date: 2020-01-28 10:20:20</span><br><span class="line">updated: 2020-01-28 16:16:16</span><br><span class="line">tags: [hexo,github]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>文章的标签还可以通过另一种方式来指定，如下方代码所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 的 NexT 主题美化</span><br><span class="line">date: 2020-01-28 10:20:20</span><br><span class="line">updated: 2020-01-28 16:16:16</span><br><span class="line">tags: </span><br><span class="line">  - hexo</span><br><span class="line">  - github</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="15-启用分类页"><a href="#15-启用分类页" class="headerlink" title="15.启用分类页"></a>15.启用分类页</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，启用标签页：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<p>在博客根目录的 source 文件夹下创建一个名为 categories 的文件夹，在 categories 文件夹下创建一个 index.md 文件，文件内容如代码块所示，需要注意的是 type 的值必须写 categories，title 是分类页的标题，可以随意起（建议直接删掉 title，分类页有标题不美观）。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span> </span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-01-28 17:40:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>与为文章添加标签类似，为文章添加所属类别也只需在文章开头的描述内容中指定，示例如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 的 NexT 主题美化</span><br><span class="line">date: 2020-01-28 10:20:20</span><br><span class="line">updated: 2020-01-28 16:16:16</span><br><span class="line">categories: </span><br><span class="line">  - 大数据</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>与一篇文章可以有多个标签不同，一篇文章只能属于一个类别，如果在指定类别时，指定了多个分类，那么就会形成层级关系，如下方代码块所示，该写法表示文章所属类别为 a&#x2F;b。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 的 NexT 主题美化</span><br><span class="line">date: 2020-01-28 10:20:20</span><br><span class="line">updated: 2020-01-28 16:16:16</span><br><span class="line">categories: </span><br><span class="line">  - a</span><br><span class="line">  - b</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="16-设置网站图标"><a href="#16-设置网站图标" class="headerlink" title="16.设置网站图标"></a>16.设置网站图标</h2><p>准备好两张图标，尺寸为 16x16 与 32x32。将下载好的图标放到 themes\next\source\images 目录中，然后打开 themes&#x2F;next&#x2F;_config.yml，设置网站图标。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/paw-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/paw-32x32-next.png</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>推荐：图标可以到 iconfont 下载</p>
</blockquote>
<h2 id="17-设置代码高亮主题"><a href="#17-设置代码高亮主题" class="headerlink" title="17.设置代码高亮主题"></a>17.设置代码高亮主题</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，具体配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">galactic</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">style:</span></span><br></pre></td></tr></table></figure>

<h2 id="18-公益404页面"><a href="#18-公益404页面" class="headerlink" title="18.公益404页面"></a>18.公益404页面</h2><p>新建 404.html，放到主题的 <code>source</code> 目录下，内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/plain&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://www.qq.com/404/search_children.js&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;/blog/&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">homePageName</span>=<span class="string">&quot;回到我的主页&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/data.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/page.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="19-隐藏文章底部-标签"><a href="#19-隐藏文章底部-标签" class="headerlink" title="19.隐藏文章底部#标签"></a>19.隐藏文章底部#标签</h2><p>打开 themes\next\layout_macro\post.swig，注释掉如下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">  &#123;%- if post<span class="selector-class">.tags</span> and post<span class="selector-class">.tags</span><span class="selector-class">.length</span> %&#125;</span><br><span class="line">    &#123;%- if theme<span class="selector-class">.tag_icon</span> %&#125;</span><br><span class="line">      &#123;%- set tag_indicate = &#x27;&lt;<span class="selector-tag">i</span> class=&quot;fa fa-tag&quot;&gt;&lt;/<span class="selector-tag">i</span>&gt;&#x27; %&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">      &#123;%- set tag_indicate = &#x27;#&#x27; %&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;post-tags&quot;&gt;</span><br><span class="line">      &#123;%- for tag in post<span class="selector-class">.tags</span><span class="selector-class">.toArray</span>() %&#125;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> href=&quot;&#123;&#123; url_for(tag<span class="selector-class">.path</span>) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag<span class="selector-class">.name</span> &#125;&#125;&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<h2 id="20-去除顶部黑线"><a href="#20-去除顶部黑线" class="headerlink" title="20.去除顶部黑线"></a>20.去除顶部黑线</h2><p>打开 <code>themes/next/layout/_layout.swig</code>，注释掉如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt; </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="21-启用关于页"><a href="#21-启用关于页" class="headerlink" title="21.启用关于页"></a>21.启用关于页</h2><p>打开 <code>themes/next/_config.yml</code>，启用关于页：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<p>在博客根目录的 source 文件夹下创建一个名为 about 的文件夹，在 about 文件夹下创建一个 index.md 文件，文件头如代码块所示，其中 title 是关于页的标题，可以随意起：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">关于</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-06-07 14:48:56</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h2 id="22-设置看板娘"><a href="#22-设置看板娘" class="headerlink" title="22.设置看板娘"></a>22.设置看板娘</h2><p>首先，拉取 <code>live2d-widget</code> 项目到 <code>themes/next/source</code> 目录下（记得删除 <code>.git</code> 文件夹）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/stevenjoezhang/live2d-widget.git source/live2d-widget</span><br></pre></td></tr></table></figure>

<p>然后，打开<code>live2d-widget</code> 项目中的 <code>autoload.js</code> 文件，修改指定代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;/live2d-widget/&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>接着，打开 <code>themes/next/layout/_layout.swig</code> 文件， 在 <code>&lt;/body&gt;</code> 标签上方添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后，打开主题配置文件 <code>themes/next/_config.yml</code> ，在其中末尾添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="23-设置标签云"><a href="#23-设置标签云" class="headerlink" title="23.设置标签云"></a>23.设置标签云</h2><p>在 <code>.github/workflows/pages.yml</code> 中添加如下配置（需要注意添加的位置）：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/install-hexo-tag-cloud.png"></p>
<p>打开 <code>next/layout/_macro/sidebar.swig</code>，添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;/js/tagcloud.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;/js/tagcanvas.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;widget-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 显示标题不美观，所以给注释掉 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h3 class=&quot;widget-title&quot;&gt;Tag Cloud&lt;/h3&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myCanvasContainer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;widget tagcloud&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">id</span>=<span class="string">&quot;resCanvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>添加位置如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/hexo-tag-cloud-in-sidebar-swig.png"></p>
<p>打开博客根目录下的 <code>_config.yml</code> 文件，添加如下设置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-tag-cloud</span></span><br><span class="line"><span class="attr">tag_cloud:</span></span><br><span class="line">    <span class="attr">textFont:</span> <span class="string">&#x27;Trebuchet MS, Helvetica&#x27;</span></span><br><span class="line">    <span class="attr">textColor:</span> <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">    <span class="attr">textHeight:</span> <span class="number">25</span></span><br><span class="line">    <span class="attr">outlineColor:</span> <span class="string">&#x27;#E2E1D1&#x27;</span></span><br><span class="line">    <span class="attr">maxSpeed:</span> <span class="number">0.1</span> <span class="comment"># range from [0.01 ~ 1]</span></span><br><span class="line">    <span class="attr">pauseOnSelected:</span> <span class="literal">false</span> <span class="comment"># true means pause the cloud tag movement when highlight a tag</span></span><br></pre></td></tr></table></figure>

<h2 id="24-参考资源"><a href="#24-参考资源" class="headerlink" title="24.参考资源"></a>24.参考资源</h2><ul>
<li><a href="https://theme-next.org/">主题官网-新</a></li>
<li><a href="http://theme-next.iissnan.com/">主题官网-旧</a></li>
<li><a href="https://www.bilibili.com/video/av17653359">使用Hexo博客搭建的个人博客，使用Next主题来进行优化改造</a></li>
<li><a href="https://www.jianshu.com/p/9f0e90cc32c2">Hexo-NexT配置超炫网页效果</a></li>
<li><a href="https://blog.csdn.net/lcyaiym/article/details/76768762?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-76768762-blog-61414438.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-76768762-blog-61414438.pc_relevant_default&utm_relevant_index=1">hexo的next创建关于我</a></li>
<li><a href="https://blog.51cto.com/u_13640625/3032364">Next主题中添加超级好玩的看板娘（CDN方式）</a></li>
<li><a href="https://www.ngui.cc/51cto/show-540008.html">Hexo博客+Next主题深度优化与定制</a></li>
<li><a href="https://github.com/stevenjoezhang/live2d-widget">stevenjoezhang&#x2F;live2d-widget: 把萌萌哒的看板娘抱回家 (ノ≧∇≦)ノ</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1934183">Hexo博客建立标签云及效果展示</a></li>
<li><a href="https://github.com/D0n9X1n/hexo-tag-cloud">D0n9X1n&#x2F;hexo-tag-cloud: Yet, just another tag cloud plugin for hexo</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter Lab 的安装与配置</title>
    <url>/2021/03/08/tool/Jupyter%20Lab%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-安装-jupyterlab"><a href="#01-安装-jupyterlab" class="headerlink" title="01.安装 jupyterlab"></a>01.安装 jupyterlab</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure>

<h2 id="02-生成配置文件"><a href="#02-生成配置文件" class="headerlink" title="02.生成配置文件"></a>02.生成配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter lab --generate-config</span><br></pre></td></tr></table></figure>

<h2 id="03-生成登录密码"><a href="#03-生成登录密码" class="headerlink" title="03.生成登录密码"></a>03.生成登录密码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; ipython</span></span><br><span class="line">Python 3.7.10 (default, Feb 26 2021, 18:47:35)</span><br><span class="line">Type &#x27;copyright&#x27;, &#x27;credits&#x27; or &#x27;license&#x27; for more information</span><br><span class="line">IPython 7.22.0 -- An enhanced Interactive Python. Type &#x27;?&#x27; for help.</span><br><span class="line"></span><br><span class="line">In [1]: from notebook.auth import passwd</span><br><span class="line"></span><br><span class="line">In [2]: passwd()</span><br><span class="line">Enter password:</span><br><span class="line">Verify password:</span><br><span class="line">Out[2]: &#x27;argon2:$argon2id$v=19$m=10240,t=10,p=8$c/W2UuRTJI1k4o40ygdcSA$/GAGaIdbluH45S2LWbrMOA&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="04-修改配置文件"><a href="#04-修改配置文件" class="headerlink" title="04.修改配置文件"></a>04.修改配置文件</h2><p>打开配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.jupyter/jupyter_lab_config.py</span><br></pre></td></tr></table></figure>

<p>修改如下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">c.ServerApp.root_dir = &#x27;/opt/notebook&#x27;</span><br><span class="line">c.ServerApp.allow_root = True</span><br><span class="line">c.ServerApp.ip = &#x27;*&#x27;</span><br><span class="line">c.ServerApp.open_browser = False</span><br><span class="line">c.ServerApp.password_required = True</span><br><span class="line">c.ServerApp.password = &#x27;argon2:$argon2id$v=19$m=10240,t=10,p=8$c/W2UuRTJI1k4o40ygdcSA$/GAGaIdbluH45S2LWbrMOA&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="05-启动-jupyterlab"><a href="#05-启动-jupyterlab" class="headerlink" title="05.启动 jupyterlab"></a>05.启动 jupyterlab</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter lab</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter Notebook 的安装与配置</title>
    <url>/2020/09/19/tool/Jupyter%20Notebook%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-安装-jupyter-notebook"><a href="#01-安装-jupyter-notebook" class="headerlink" title="01.安装 jupyter notebook"></a>01.安装 jupyter notebook</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure>

<h2 id="02-生成配置文件"><a href="#02-生成配置文件" class="headerlink" title="02.生成配置文件"></a>02.生成配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>

<h2 id="03-生成登录密码"><a href="#03-生成登录密码" class="headerlink" title="03.生成登录密码"></a>03.生成登录密码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; ipython</span></span><br><span class="line">Python 3.7.9 (default, Aug 31 2020, 07:22:35)</span><br><span class="line">Type &#x27;copyright&#x27;, &#x27;credits&#x27; or &#x27;license&#x27; for more information</span><br><span class="line">IPython 7.19.0 -- An enhanced Interactive Python. Type &#x27;?&#x27; for help.</span><br><span class="line"></span><br><span class="line">In [1]: from notebook.auth import passwd</span><br><span class="line"></span><br><span class="line">In [2]: passwd()</span><br><span class="line">Enter password:</span><br><span class="line">Verify password:</span><br><span class="line">Out[2]: &#x27;argon2:$argon2id$v=19$m=10240,t=10,p=8$4sWk2oPuIpqDtIw4MYb/9g$iTpy4dhz3to+3AlyBD7Btw&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="04-修改配置文件"><a href="#04-修改配置文件" class="headerlink" title="04.修改配置文件"></a>04.修改配置文件</h2><p>打开配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>

<p>修改如下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 Jupyter 监听的 ip 地址，修改为 * 表示监听所有 ip 地址</span></span><br><span class="line">c.NotebookApp.ip = &#x27;*&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置密码</span></span><br><span class="line">c.NotebookApp.password = u&#x27;argon2:$argon2id$v=19$m=10240,t=10,p=8$4sWk2oPuIpqDtIw4MYb/9g$iTpy4dhz3to+3AlyBD7Btw&#x27; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁止启动时自动打开浏览器</span></span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定端口，默认是8888</span></span><br><span class="line">c.NotebookApp.port = 8888</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 notebook 文件的目录（要在启动前创建出来）</span></span><br><span class="line">c.NotebookApp.notebook_dir = &#x27;/Users/leo/Documents/notebook&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许 root 用户运行</span></span><br><span class="line">c.NotebookApp.allow_root = True</span><br></pre></td></tr></table></figure>

<h2 id="05-启动-juypter"><a href="#05-启动-juypter" class="headerlink" title="05.启动 juypter"></a>05.启动 juypter</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 安装 PicGo</title>
    <url>/2019/01/15/tool/Mac%20%E5%AE%89%E8%A3%85%20PicGo/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-安装步骤"><a href="#01-安装步骤" class="headerlink" title="01.安装步骤"></a>01.安装步骤</h2><p>下载 <a href="https://github.com/Molunerfinn/PicGo/releases">PicoGo</a> 的 dmg 包，点击安装。完成后，打开 PicGo 时可能会遇到 <code>无法打开 PicGo，因为它来自身份不明的开发者</code> 问题。解决办法如下：</p>
<ol>
<li>在终端执行如下命令 <code>sudo spctl --master-disable</code>；</li>
<li>打开 <code>系统偏好设置 -&gt; 安全性与隐私 –&gt; 通用</code>，<em>允许从以下位置下载的 App</em> 选择 <code>任何来源</code>；</li>
</ol>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/solve_problem_encountered_during_picgo_installation_on_mac.png"></p>
<h2 id="02-参考资料"><a href="#02-参考资料" class="headerlink" title="02.参考资料"></a>02.参考资料</h2><ul>
<li><a href="https://c4dsky.com/26380.html">解决 MacOS 因为它来自身份不明的开发者,不显示允许任何来源 –安装文件下载损坏问题</a>。</li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>picgo</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 常用配置及操作</title>
    <url>/2016/03/31/tool/Maven%20%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-Maven-设置阿里云镜像"><a href="#01-Maven-设置阿里云镜像" class="headerlink" title="01.Maven 设置阿里云镜像"></a>01.Maven 设置阿里云镜像</h2><p>修改 <code>$MAVEN_HOME/conf/settings.xml</code> 文件中的 mirrors 标签，配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">	<span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="02-Maven-配置本地仓库路径"><a href="#02-Maven-配置本地仓库路径" class="headerlink" title="02.Maven 配置本地仓库路径"></a>02.Maven 配置本地仓库路径</h2><p>找到 <code>$MAVEN_HOME/conf/settings.xml</code> 文件中的 <code>localRepository</code> 标签，将注释打开，并配置本地仓库路径，示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="03-Maven-编译时跳过-test"><a href="#03-Maven-编译时跳过-test" class="headerlink" title="03.Maven 编译时跳过 test"></a>03.Maven 编译时跳过 test</h2><p>跳过 test 的执行，但会编译：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean install -DskipTests</span><br></pre></td></tr></table></figure>

<p>跳过 test 编译：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<h2 id="04-Maven-断点续编"><a href="#04-Maven-断点续编" class="headerlink" title="04.Maven 断点续编"></a>04.Maven 断点续编</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn &lt;goals&gt; -rf :&lt;moduleName&gt;</span><br></pre></td></tr></table></figure>

<h2 id="05-Maven-离线安装依赖"><a href="#05-Maven-离线安装依赖" class="headerlink" title="05.Maven 离线安装依赖"></a>05.Maven 离线安装依赖</h2><p>在 shell 中执行如下命令来离线安装依赖包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=io.confluent -DartifactId=kafka-schema-registry-client -Dversion=3.3.1 -Dpackaging=jar -Dfile=C:\Users\Leo\Downloads\kafka-schema-registry-client-3.3.1.jar</span><br></pre></td></tr></table></figure>

<p>如果需要指定 classifier，可执行下面命令（需要注意 classifier 的位置，原因可参考《<a href="https://www.cnblogs.com/lnlvinso/p/10111328.html">Maven的classifier作用</a>》）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=org.apache.flink -DartifactId=flink-table-planner-blink_2.11 -Dversion=1.12-SNAPSHOT -Dclassifier=tests -Dpackaging=jar -Dfile=C:\Users\zhouli16\Downloads\flink-table-planner-blink_2.11-1.12-20200706.040013-54-tests.jar</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问题：在 powershell 中执行会失败</p>
<p>解决：使用 CMD 来执行，或者给参数加上引号，如 <code>-DgroupId=io.confluent</code> 修改为 <code>-D&quot;groupId=io.confluent&quot;</code></p>
</blockquote>
<blockquote>
<p>问题：通过离线方式安装依赖包时，maven-shade-plugin 无法将依赖的依赖一起打入 jar 包</p>
<p>解决：执行 <code>install:install-file</code> 时，使用 <code>-DpomFile=xxx</code> 来指定依赖的 pom 文件</p>
</blockquote>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 常用配置总结</title>
    <url>/2016/04/07/tool/MySQL%20%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-解除-MySQL-对简单密码的限制"><a href="#01-解除-MySQL-对简单密码的限制" class="headerlink" title="01.解除 MySQL 对简单密码的限制"></a>01.解除 MySQL 对简单密码的限制</h2><p>在 <code>/etc/my.cnf</code> 的 <i><font color=red>[mysqld]</font></i> 标签下添加如下配置，然后重启 MySQL 服务即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugin-load=validate_password.so </span><br><span class="line">validate-password=OFF</span><br></pre></td></tr></table></figure>

<h2 id="02-MySQL-5-7-开启-binlog"><a href="#02-MySQL-5-7-开启-binlog" class="headerlink" title="02.MySQL 5.7 开启 binlog"></a>02.MySQL 5.7 开启 binlog</h2><p>在 <code>/etc/my.cnf</code> 的 <i><font color=red>[mysqld]</font></i> 标签下添加如下配置，然后重启 MySQL 服务即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server_id=1			# 配置 MySQL Replication 时需要定义</span><br><span class="line">log_bin=mysql-bin	# 开启 binlog</span><br><span class="line">binlog_format=ROW 	# 选择 ROW 模式</span><br><span class="line">expire_logs_days=30	# 过期时间</span><br></pre></td></tr></table></figure>

<h2 id="03-参考资料"><a href="#03-参考资料" class="headerlink" title="03.参考资料"></a>03.参考资料</h2><ul>
<li><a href="https://www.cnblogs.com/zhylioooo/p/11084489.html">yum 安装指定版本 MySQL</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>QTTabBar 安装使用</title>
    <url>/2021/07/01/tool/QTTabBar%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>需要安装 .net3.5，win10 安装 .net3.5 的方法可参考 <a href="https://jingyan.baidu.com/article/455a9950dbe21de167277823.html">解决win10系统无法安装.NET Framework 3.5</a>。</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>国内开发者在 Github 上维护了一个 <a href="https://github.com/indiff/qttabbar">QTTabBar</a> 的汉化版本，下载安装即可，安装过程比较慢，耐心等待即可。</p>
<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p>QTTabBar 启用后，资源管理器里面有一些网格线，看着不舒服，去掉这些网格线的方法如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/remove_grid_lines_caused_by_qttabbar.png"></p>
<p>在标签栏有一个蓝色的加号按钮，看着也不习惯，去掉的方法如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/remove_blue_button_on_tab_bar.png"></p>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>没有安装 .net3.5 的机器安装 QTTabBar 后，在启用时会闪退。此时，并不是说把 .net3.5 装上，QTTabBar 就能用了，需要先卸载 QTTabBar 并删除一些注册信息，然后再重新安装 QTTabBar，具体的操作可参考 <a href="https://gitee.com/qwop/qttabbar/attach_files/581136/download">打开选项闪退的解决方案修订版</a>。</p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>qttabar</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04 设置国内镜像源</title>
    <url>/2021/07/01/tool/Ubuntu%2020.04%20%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-获取配置"><a href="#01-获取配置" class="headerlink" title="01.获取配置"></a>01.获取配置</h2><p>点击 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">Ubuntu 镜像使用帮助</a> ，选择合适的版本，获取到相应的配置，接下来就是修改 Ubuntu 的软件源。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/ubuntu_source_supported_by_tsinghua.png"></p>
<h2 id="02-修改配置"><a href="#02-修改配置" class="headerlink" title="02.修改配置"></a>02.修改配置</h2><p>首先，进行备份：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.back</span><br></pre></td></tr></table></figure>

<p>然后，替换 source.list 内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预发布软件源，不建议启用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>

<h2 id="03-更新索引"><a href="#03-更新索引" class="headerlink" title="03.更新索引"></a>03.更新索引</h2><p>更新包索引：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>该步骤出现了如下所示的证书异常：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/apt_get_update_error.png"></p>
<p>解决办法也很简单，只需将源地址中的 https 修改为 http。替换 source.list 内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预发布软件源，不建议启用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>

<p>重新执行更新包索引命令，此时操作顺利完成。</p>
<h2 id="04-升级软件"><a href="#04-升级软件" class="headerlink" title="04.升级软件"></a>04.升级软件</h2><p>更新完包索引后，可以执行如下命令来升级软件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<h2 id="05-测试验证"><a href="#05-测试验证" class="headerlink" title="05.测试验证"></a>05.测试验证</h2><p>最后，来安装一个软件，这个软件名称为 build-essential，它可以配置好 Ubuntu 上的 C&#x2F;C++ 的编译环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure>

<p>安装操作可正常完成，无异常发生。</p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>pip 常用配置</title>
    <url>/2015/06/16/tool/pip%20%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-CentOS-7-中-pip-配置国内镜像源"><a href="#01-CentOS-7-中-pip-配置国内镜像源" class="headerlink" title="01.CentOS 7 中 pip 配置国内镜像源"></a>01.CentOS 7 中 pip 配置国内镜像源</h2><p>修改 <code>~/.pip/pip.conf</code>（没有则手动创建），内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url=http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure>

<h2 id="02-CentOS-7-中为-python-2-7-5-安装-pip-模块"><a href="#02-CentOS-7-中为-python-2-7-5-安装-pip-模块" class="headerlink" title="02.CentOS 7 中为 python 2.7.5 安装 pip 模块"></a>02.CentOS 7 中为 python 2.7.5 安装 pip 模块</h2><p>安装 setuptools：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/ez_setup.py | python</span><br></pre></td></tr></table></figure>

<p>pip 安装模块的时候可能会用到 gcc，所以最好把 gcc 装上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y gcc</span><br></pre></td></tr></table></figure>

<p>下载 pip 模块：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://files.pythonhosted.org/packages/c8/89/ad7f27938e59db1f0f55ce214087460f65048626e2226531ba6cb6da15f0/pip-19.0.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>解压 pip 模块：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf pip-19.0.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>安装 pip 模块：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<p>查看 pip 版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip --version</span><br></pre></td></tr></table></figure>

<h2 id="03-CentOS-7-中-pip-安装-matplotlib"><a href="#03-CentOS-7-中-pip-安装-matplotlib" class="headerlink" title="03.CentOS 7 中 pip 安装 matplotlib"></a>03.CentOS 7 中 pip 安装 matplotlib</h2><p>安装命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure>

<p>安装过程中，可能会碰到下面两个问题：</p>
<ul>
<li>问题：<code>configure: error: no acceptable C compiler found in $PATH</code></li>
<li>解决：<code>sudo yum install -y gcc</code></li>
<li>问题：<code>_posixsubprocess.c:16:20: fatal error: Python.h: No such file or directory</code></li>
<li>解决：<code>sudo yum -y install python-devel</code></li>
</ul>
<h2 id="04-参考资料"><a href="#04-参考资料" class="headerlink" title="04.参考资料"></a>04.参考资料</h2><ul>
<li><a href="https://www.cnblogs.com/supermanwx/p/10320029.html">python安装pip模块</a></li>
<li><a href="https://www.runoob.com/w3cnote/python-pip-install-usage.html">菜鸟教程：Python pip 安装与使用</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>tar 命令实现分卷压缩</title>
    <url>/2020/08/14/tool/tar%20%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%8D%B7%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-压缩"><a href="#01-压缩" class="headerlink" title="01.压缩"></a>01.压缩</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -czvf - jdk1.8.0_221/ | split -b 100m - jdk1.8.0_221.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="02-解压"><a href="#02-解压" class="headerlink" title="02.解压"></a>02.解压</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat jdk1.8.0_221.tar.gza* | tar -xzv</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 文本转 linux 文本</title>
    <url>/2015/04/07/tool/windows%20%E6%96%87%E6%9C%AC%E8%BD%AC%20linux%20%E6%96%87%E6%9C%AC/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-安装-dos2unix"><a href="#01-安装-dos2unix" class="headerlink" title="01.安装 dos2unix"></a>01.安装 dos2unix</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y dos2unix</span><br></pre></td></tr></table></figure>

<h2 id="02-执行转换"><a href="#02-执行转换" class="headerlink" title="02.执行转换"></a>02.执行转换</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dos2unix filename|directory</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>yum 方式安装 MySQL</title>
    <url>/2016/04/07/tool/yum%20%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85%20MySQL/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-环境说明"><a href="#01-环境说明" class="headerlink" title="01.环境说明"></a>01.环境说明</h2><ul>
<li>CentOS 7.7.1908</li>
<li>MySQL 5.7</li>
</ul>
<h2 id="02-安装步骤"><a href="#02-安装步骤" class="headerlink" title="02.安装步骤"></a>02.安装步骤</h2><p>检测是否自带：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure>

<p>卸载自带 mysql：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps &lt;rpm qa|grep mysql命令查出来的包&gt;</span><br></pre></td></tr></table></figure>

<p>下载 mysql 源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>安装 mysql 源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>更新 yum 源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>

<p>列出可用版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>

<p>禁用 yum 源中的 mysql80：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --<span class="built_in">disable</span> mysql80-community</span><br></pre></td></tr></table></figure>

<p>开启 yum 源中的 mysql57：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --<span class="built_in">enable</span> mysql57-community</span><br></pre></td></tr></table></figure>

<p>验证 enable 的 mysql 版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>

<p>再次卸载 mysql：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps &lt;rpm -qa|grep mysql命令查出来的包，不要删带有noarch的包&gt;</span><br></pre></td></tr></table></figure>

<p>安装 mysql：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y mysql-community-server</span><br></pre></td></tr></table></figure>

<p>启动 mysql：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mysqld.service</span><br></pre></td></tr></table></figure>

<p>检查 mysql 状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status mysqld.service</span><br></pre></td></tr></table></figure>

<p>设置开机自启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld.service</span><br></pre></td></tr></table></figure>

<p>获取 ‘root‘@’localhost’ 的密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p>连接 mysql 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p>修改 root 密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;MyNewPass4!&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="03-参考资料"><a href="#03-参考资料" class="headerlink" title="03.参考资料"></a>03.参考资料</h2><ul>
<li><a href="https://www.runoob.com/mysql/mysql-install.html">菜鸟教程</a></li>
<li><a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/">官方资料</a></li>
<li><a href="https://www.cnblogs.com/zhylioooo/p/11084489.html">yum安装指定版本mysql</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>一些实用的网站导航</title>
    <url>/2015/09/16/tool/%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-在线工具"><a href="#01-在线工具" class="headerlink" title="01.在线工具"></a>01.在线工具</h2><ul>
<li><a href="https://mubu.com/home">幕布 - 极简大纲笔记 ｜ 一键生成思维导图 (mubu.com)</a></li>
</ul>
<h2 id="02-实用网址"><a href="#02-实用网址" class="headerlink" title="02.实用网址"></a>02.实用网址</h2><ul>
<li><a href="http://jdk.java.net/archive/">OpenJDK Archive</a></li>
<li><a href="https://portal.shadowsocks.nz/">Shadowsocks.com</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>site</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Github + PicGo 搭建个人图床</title>
    <url>/2022/06/06/tool/%E5%9F%BA%E4%BA%8E%20Github%20+%20PicGo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-生成-Github-私人令牌"><a href="#01-生成-Github-私人令牌" class="headerlink" title="01.生成 Github 私人令牌"></a>01.生成 Github 私人令牌</h2><p>通过<a href="https://github.com/settings/tokens">链接</a>进入 <code>Github</code> 的 <code>tokens</code> 页面，点击页面右上方的 <code>Generate new token</code> 按钮创建一个新的 <code>token</code>，记下这个 <code>token</code>，后面会使用到。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/github-token.png"></p>
<h2 id="02-配置-Github-图床"><a href="#02-配置-Github-图床" class="headerlink" title="02.配置 Github 图床"></a>02.配置 Github 图床</h2><p>下载安装 <a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>，配置 Github 图床，配置细节如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/pocgo-github.png"></p>
<h2 id="03-上传图片到-Github-图床"><a href="#03-上传图片到-Github-图床" class="headerlink" title="03.上传图片到 Github 图床"></a>03.上传图片到 Github 图床</h2><p>上传图片后，返回的链接会自动进入剪贴板，可直接粘贴使用。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/pocgo-github-1.png"></p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>picgo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Hexo + Github Pages + Github Actions 搭建个人博客</title>
    <url>/2022/06/06/tool/%E5%9F%BA%E4%BA%8E%20Hexo%20+%20Github%20Pages%20+%20Github%20Actions%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-初始化仓库"><a href="#01-初始化仓库" class="headerlink" title="01.初始化仓库"></a>01.初始化仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init zhoulii.github.io</span><br><span class="line">cd zhoulii.github.io</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;initialize zhoulii.github.io&quot;</span><br><span class="line">git remote add origin https://github.com/zhoulii/zhoulii.github.io.git</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h2 id="02-配置-Github-Actions"><a href="#02-配置-Github-Actions" class="headerlink" title="02.配置 Github Actions"></a>02.配置 Github Actions</h2><p>在仓库中创建 <code>.github/workflows/pages.yml</code>，具体内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name: deploy zhoulii.github.io  </span><br><span class="line">  </span><br><span class="line">on:  </span><br><span class="line">  push:  </span><br><span class="line">    branches:  </span><br><span class="line">      - master</span><br><span class="line">  </span><br><span class="line">jobs:  </span><br><span class="line">  pages:  </span><br><span class="line">    runs-on: ubuntu-latest  </span><br><span class="line">    steps:  </span><br><span class="line">      - uses: actions/checkout@v2  </span><br><span class="line">      - name: Use Node.js 16.x  </span><br><span class="line">        uses: actions/setup-node@v2  </span><br><span class="line">        with:  </span><br><span class="line">          node-version: &#x27;16&#x27;  </span><br><span class="line">      - name: Cache NPM dependencies  </span><br><span class="line">        uses: actions/cache@v2  </span><br><span class="line">        with:  </span><br><span class="line">          path: node_modules  </span><br><span class="line">          key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache  </span><br><span class="line">          restore-keys: |  </span><br><span class="line">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache  </span><br><span class="line">      - name: Install Dependencies  </span><br><span class="line">        run: npm install  </span><br><span class="line">      - name: Build  </span><br><span class="line">        run: npm run build  </span><br><span class="line">      - name: Deploy  </span><br><span class="line">        uses: peaceiris/actions-gh-pages@v3  </span><br><span class="line">        with:  </span><br><span class="line">          github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;  </span><br><span class="line">          publish_dir: ./public</span><br></pre></td></tr></table></figure>
<p>需要注意两点：</p>
<ul>
<li><code>node</code> 版本需要与本地机器一致（可使用 <code>node --version</code> 查看）</li>
<li>配置中的变量不需要手动指定</li>
</ul>
<p>将 <code>.github/workflows/pages.yml</code> 同步到远程仓库，点击仓库主页的 <code>Actions</code> 标签，可以看到 <code>workflow</code> 的执行情况。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/github-actions-hexo.png"></p>
<p><code>workflow</code> 执行完成后，仓库会多出一个名为 <code>gh-pages</code> 的分支，<code>Hexo</code> 生成的静态网站文件即在该分支下。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/gh-pages-branch.png"></p>
<h2 id="03-配置-Github-Pages"><a href="#03-配置-Github-Pages" class="headerlink" title="03.配置 Github Pages"></a>03.配置 Github Pages</h2><p><code>Hexo</code> 生成的静态网站文件在  <code>gh-pages</code>  分支下，接下来配置 <code>Github Pages</code> 从 <code>gh-pages</code>  分支构建站点：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/github-pages-hexo.png"></p>
<p>配置完成后，稍等个一两分钟，网站就可以访问了，网站首页如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/hello-world-hexo.png"></p>
<h2 id="04-参考资料"><a href="#04-参考资料" class="headerlink" title="04.参考资料"></a>04.参考资料</h2><ul>
<li><a href="https://hexo.io/docs/github-pages.html">GitHub Pages | Hexo</a></li>
<li><a href="https://github.com/peaceiris/actions-gh-pages">peaceiris&#x2F;actions-gh-pages: GitHub Actions for GitHub Pages</a></li>
<li><a href="https://www.jianshu.com/p/eadeddb792c5">博客之旅：从 Jekyll 到 Hexo</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 PicGo&amp;Gitee 搭建个人图床</title>
    <url>/2019/01/15/tool/%E5%9F%BA%E4%BA%8E%20PicGo&amp;Gitee%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-Gitee-相关配置"><a href="#01-Gitee-相关配置" class="headerlink" title="01.Gitee 相关配置"></a>01.Gitee 相关配置</h2><p>首先要在 Gitee 上创建一个仓库，然后就是生成私人令牌。在 Gitee 的设置页面可以找到私人令牌标签，按下图所示进行配置，记住生成的私人令牌。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/create_personal_access_token_for_picgo.png"></p>
<h2 id="02-PicGo-相关配置"><a href="#02-PicGo-相关配置" class="headerlink" title="02.PicGo 相关配置"></a>02.PicGo 相关配置</h2><p>下载安装 <a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>，然后将镜像地址设置为 <code>https://registry.npm.taobao.org/</code>。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/set_the_mirror_repository_for_picgo_plugin_1.png"></p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/set_the_mirror_repository_for_picgo_plugin_2.png"></p>
<p>打开插件设置栏，搜索安装 Gitee 插件（<em>如果没有 nodejs 环境，那么需要先安装 nodejs，然后重启 PicGo</em>） 。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/install_gitee_plugin_for_picgo.png"></p>
<p>接下来就是配置 Gitee 图床，配置参数含义可参照下图注解。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/config_gitee_plugin_for_pico.png"></p>
<h2 id="03-上传区及相册"><a href="#03-上传区及相册" class="headerlink" title="03.上传区及相册"></a>03.上传区及相册</h2><p>完成上述操作之后，即可在 PicGo 的上传区上传图片。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/upload_image_to_gitee_by_picgo.png"></p>
<p>在相册栏可以查看已上传的图片，还可以复制链接、修改链接、删除图片以及进行一些批量操作。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/album_in_picgo.png"></p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>picgo</tag>
      </tags>
  </entry>
</search>
