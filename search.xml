<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flink 1.11.0 维表 join 条件中包含 UDF 时执行出错</title>
    <url>/2020/07/12/flink/Flink%201.11.0%20%E7%BB%B4%E8%A1%A8%20join%20%E6%9D%A1%E4%BB%B6%E4%B8%AD%E5%8C%85%E5%90%AB%20UDF%20%E6%97%B6%E6%89%A7%E8%A1%8C%E5%87%BA%E9%94%99/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-背景"><a href="#01-背景" class="headerlink" title="01.背景"></a>01.背景</h2><p>当 flink 1.11.0 执行如下 sql 时报错：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.id, t1.product, t2.price <span class="keyword">from</span> table1 <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">join</span> table2 <span class="keyword">for</span> <span class="built_in">system_time</span> <span class="keyword">as</span> <span class="keyword">of</span> t1.proctime <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.id <span class="operator">=</span> t2.id <span class="keyword">where</span> <span class="built_in">current_date</span> <span class="operator">=</span> t2.sell_date</span><br></pre></td></tr></table></figure>

<h2 id="02-排查"><a href="#02-排查" class="headerlink" title="02.排查"></a>02.排查</h2><p>出错位置位于 <code>CommonLookupJoin#extractConstantField</code>，原因是 RexCall 类型匹配不上，可以在该方法的 match 语句中增加 <code>case _ =&gt; return</code> 来解决该问题。</p>
<h2 id="03-补充"><a href="#03-补充" class="headerlink" title="03.补充"></a>03.补充</h2><p><a href="https://issues.apache.org/jira/browse/FLINK-18212">FLINK-18212</a> 已经提出并解决了该问题</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink 1.11.0 连接 postgre 的问题</title>
    <url>/2020/10/27/flink/Flink%201.11.0%20%E8%BF%9E%E6%8E%A5%20postgre%20%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-问题描述"><a href="#01-问题描述" class="headerlink" title="01.问题描述"></a>01.问题描述</h2><p>pg 中有一张 pg_sink 表，结构如下：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>Name</td>
<td>VARCHAR</td>
</tr>
<tr>
<td>address</td>
<td>VARCHAR</td>
</tr>
<tr>
<td>work</td>
<td>VARCHAR</td>
</tr>
</tbody></table>
<p>使用 Flink 1.11.0 执行如下 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> pg_sink (</span><br><span class="line">	Name <span class="type">VARCHAR</span>,</span><br><span class="line">	address <span class="type">VARCHAR</span>,</span><br><span class="line">	work <span class="type">VARCHAR</span></span><br><span class="line">) <span class="keyword">with</span> (</span><br><span class="line">    <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;jdbc&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;jdbc:postgresql://***:***/***&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;table-name&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;pg_sink&#x27;</span>,</span><br><span class="line">	...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> kafka_source(</span><br><span class="line">    Name <span class="type">VARCHAR</span>,</span><br><span class="line">    address <span class="type">VARCHAR</span>,</span><br><span class="line">    work <span class="type">VARCHAR</span></span><br><span class="line">) <span class="keyword">with</span> (</span><br><span class="line">    <span class="string">&#x27;connector.type&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;kafka&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;format.type&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">	...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pg_sink </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> kafka_source;</span><br></pre></td></tr></table></figure>

<p>上述 SQL 任务运行失败，错误信息如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Caused by: org.postgresql.util.PSQLException: ERROR: column &quot;Name&quot; of relation &quot;pg_sink&quot; does not exist</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="02-原因分析"><a href="#02-原因分析" class="headerlink" title="02.原因分析"></a>02.原因分析</h2><p>参考《<a href="https://www.cnblogs.com/kaituorensheng/p/5445696.html">PostgreSQL 对字段大小写敏感</a>》，《<a href="https://blog.csdn.net/LittleGlassHeart/article/details/102566867">PostgreSQL 中的单引号与双引号</a>》</p>
<h2 id="03-如何解决"><a href="#03-如何解决" class="headerlink" title="03.如何解决"></a>03.如何解决</h2><p><code>org.apache.flink.connector.jdbc.dialect.JdbcDialect#quoteIdentifier</code> 方法会对 SQL 中的字段加上双引号，而 <code>org.apache.flink.connector.jdbc.dialect.PostgresDialect#quoteIdentifier</code> 方法则不会对字段做出处理。所以，只需删除 <code>PostgresDialect#quoteIdentifier</code> 方法，让 <code>JdbcDialect#quoteIdentifier</code> 方法生效即可解决上述问题。</p>
<h2 id="04-补充说明"><a href="#04-补充说明" class="headerlink" title="04.补充说明"></a>04.补充说明</h2><p>这种处理方式会引起其他问题，举例解释下：</p>
<ul>
<li>schemax.tablex： Schema 名为 schemax，表名为 tablex </li>
<li>“schemax.tablex”：表名为 schemax.tablex</li>
</ul>
<p>所以，如果给标识符直接加上双引号，就没法区分 PG 的 Schema 了。关于该问题的更多讨论可参见 <a href="https://issues.apache.org/jira/browse/FLINK-19829">FLINK-19829</a>、<a href="https://issues.apache.org/jira/browse/FLINK-18640">FLINK-18640</a>。</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink 使用 FTP 作为 Checkpoint 文件系统</title>
    <url>/2020/06/29/flink/Flink%20%E4%BD%BF%E7%94%A8%20FTP%20%E4%BD%9C%E4%B8%BA%20Checkpoint%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-背景说明"><a href="#01-背景说明" class="headerlink" title="01.背景说明"></a>01.背景说明</h2><p><code>Flink Job</code> 在运行失败时，可以从上一个 <code>checkpoint</code> 进行恢复，不过这有一个前提，就是 <code>checkpoint</code> 数据对所有的 <code>Task</code> 来说都是可以访问的。通常，我们会将 <code>checkpoint</code> 目录设置为 <code>HDFS</code>，但在一些轻量级的生产场景中是没有部署 <code>HDFS</code> 的，所以考虑使用 <code>FTP</code> 来保存 <code>checkpoint</code> 数据。</p>
<h2 id="02-实现思路"><a href="#02-实现思路" class="headerlink" title="02.实现思路"></a>02.实现思路</h2><p><code>Flink</code> 可以使用 <code>HDFS</code> 作为 <code>checkpoint</code> 目录的原因是 <code>Flink</code> 支持 <code>HDFS</code> 文件系统，所以如果 <code>Flink</code> 可以支持 <code>FTP</code> 文件系统，那么我们就可以用 <code>FTP</code> 来存储 <code>checkpoint</code> 数据。查看 <code>hadoop</code> 的 <code>hadoop-common</code> 模块，可以发现 <code>FTP</code> 对应的文件系统实现是 <code>FTPFileSystem</code>，而 <code>Flink</code> 文件系统又是兼容 <code>Hadoop</code> 文件系统的，所以只要引入 <code>hadoop-common</code> 模块便可以让 <code>Flink</code> 支持 <code>FTP</code>，不过，为防止类冲突，最好引入 <code>Flink</code> 提供的 <code>flink-shaded-hadoop</code>。</p>
<h2 id="03-实现步骤"><a href="#03-实现步骤" class="headerlink" title="03.实现步骤"></a>03.实现步骤</h2><ul>
<li>将 <code>flink-shaded-hadoop-2-uber-xxx.jar</code> 放到 <code>Flink</code> 的 <code>lib</code> 路径下（必须放到 <code>lib</code> 路径下，打在作业 <code>Jar</code> 中加载不到）；</li>
<li>重启 <code>Flink Standalone</code> 集群;</li>
<li>作业代码中将 checkpoint 目录设置为 ftp，设置方式如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">env.setStateBackend(<span class="keyword">new</span> <span class="title class_">RocksDBStateBackend</span>(<span class="string">&quot;ftp://user:password@ip:port/path&quot;</span>).asInstanceOf[StateBackend])</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="04-问题分析"><a href="#04-问题分析" class="headerlink" title="04.问题分析"></a>04.问题分析</h2><p>提交作业到集群，可以发现 <code>Job</code> 是正常运行的，不过查看 <code>JobManager</code> 的日志可以发现，checkpoint 出错了，错误信息如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/ftp-checkpoint-error.png"></p>
<p>这里给出的错误原因是无法创建 <code>checkpoint</code> 目录，而此时 <code>FTP</code> 服务是正常的，手动创建目录、上传文件都没问题，所以可以排除 <code>FTP</code> 本身的问题。经过代码调试发现，问题是由路径引起的，因为使用 <code>FTPFileSystem</code> 创建目录时，路径必须是 <code>/A/B/C</code> 这样的形式，像 <code>ftp://user:password@ip:port/path</code> 这样的路径是不被 <code>FTPFileSystem</code> 支持的。</p>
<h2 id="05-自定义-FTPFileSystem"><a href="#05-自定义-FTPFileSystem" class="headerlink" title="05.自定义 FTPFileSystem"></a>05.自定义 FTPFileSystem</h2><p>自定义<code>FTPFileSystem</code> 来支持 <code>ftp://user:password@ip:port/path</code>  格式的路径，实现步骤如下：</p>
<p><strong>1.创建一个 Maven 项目，pom 写法如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-shaded-hadoop-2-uber<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.5-10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.google.code.findbugs:jsr305<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org.slf4j:*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>log4j:*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">							<span class="comment">&lt;!-- Do not copy the signatures in the META-INF folder.</span></span><br><span class="line"><span class="comment">							Otherwise, this might cause SecurityExceptions when using the JAR. --&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.复制 <code>FTPFileSystem</code> 到项目中，并将其重命名为 <code>HFTPFileSystem</code></strong></p>
<p><strong>3.修改 <code>HFTPFileSystem</code> 中的 <code>makeabsolute</code> 方法，修改后的方法如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Path <span class="title function_">makeAbsolute</span><span class="params">(Path workDir, Path path)</span> &#123;</span><br><span class="line">	Path absolute;</span><br><span class="line">	<span class="keyword">if</span>(<span class="string">&quot;hftp&quot;</span>.equals(path.toUri().getScheme()))&#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="type">String</span> <span class="variable">pathStr</span> <span class="operator">=</span> path.toUri().getPath().substring(<span class="number">1</span>);</span><br><span class="line">		absolute = <span class="keyword">new</span> <span class="title class_">Path</span>(workDir, pathStr);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (path.isAbsolute()) &#123;</span><br><span class="line">			<span class="keyword">return</span> path;</span><br><span class="line">		&#125;</span><br><span class="line">		absolute = <span class="keyword">new</span> <span class="title class_">Path</span>(workDir, path);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.修改 <code>HFTPFileSystem</code> 中的 <code>getSchema</code> 方法，修改后的方法如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getScheme</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;hftp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5.在 <code>resources/META-INF/services</code> 目录下新建一个名为 <code>org.apache.hadoop.fs.FileSystem</code> 的文件，内容为 <code>HFTPFileSystem</code> 的全路径名</strong></p>
<p><strong>6.将项目打成 <code>jar</code> 包</strong></p>
<h2 id="06-自定义-FTPFileSystem-的使用"><a href="#06-自定义-FTPFileSystem-的使用" class="headerlink" title="06.自定义 FTPFileSystem 的使用"></a>06.自定义 FTPFileSystem 的使用</h2><ul>
<li>将开发好的项目 <code>jar</code> 包放到 <code>Flink</code> 的 <code>lib</code> 路径下（必须放到 <code>lib</code> 路径下，打在作业 <code>jar</code> 中加载不到）；</li>
<li>重启 <code>Flink Standalone</code> 集群；</li>
<li>作业代码中将 <code>checkpoint</code> 目录设置为 <code>ftp</code>，协议头使用 <code>hftp</code>，设置方式如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">env.setStateBackend(<span class="keyword">new</span> <span class="title class_">RocksDBStateBackend</span>(<span class="string">&quot;hftp://user:password@ip:port/path&quot;</span>).asInstanceOf[StateBackend])</span><br></pre></td></tr></table></figure>

<p>此时，提交作业到集群，可以发现 <code>Job</code> 是正常运行的，<code>checkpoint</code> 数据也顺利落地到所配置的 <code>FTP</code> 目录。</p>
<h2 id="07-参考资料"><a href="#07-参考资料" class="headerlink" title="07.参考资料"></a>07.参考资料</h2><ul>
<li><a href="https://blog.csdn.net/weixin_41917987/article/details/90294765">Flink的standalone运行模式之State存储—-不使用HDFS</a></li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink 使用 FTP 作为 Checkpoint 文件系统存在的问题</title>
    <url>/2020/07/05/flink/Flink%20%E4%BD%BF%E7%94%A8%20FTP%20%E4%BD%9C%E4%B8%BA%20Checkpoint%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-背景说明"><a href="#01-背景说明" class="headerlink" title="01.背景说明"></a>01.背景说明</h2><a href="/2020/06/29/flink/Flink%20%E4%BD%BF%E7%94%A8%20FTP%20%E4%BD%9C%E4%B8%BA%20Checkpoint%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/" title="Flink 使用 FTP 作为 Checkpoint 文件系统">Flink 使用 FTP 作为 Checkpoint 文件系统</a> 介绍了如何让 Flink Checkpoint 后端支持 FTP，并实现了此项功能。项目上线后，FTP 作为 Flink Checkpoint 状态后端可以正常工作，但项目运行一段时间后，偶尔在做 Checkpoint 时会出现端口被占用异常，从而出现 Checkpoint 失败，作业重启的问题。

<h2 id="02-问题排查"><a href="#02-问题排查" class="headerlink" title="02.问题排查"></a>02.问题排查</h2><p>首先看下异常发生的位置：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-ftp-checkpoint-failed.png"></p>
<p>下面是我的排查思路：</p>
<ul>
<li>检查机器的端口，发现大量端口处于 time_wait 状态，推测短链接建立太多，机器端口被占用完；</li>
<li>排查代码，<code>_serverSocketFactory_.createServerSocket</code> 绑定的端口是 0，意思是由操作系统分配可用端口，无端口可分配也会抛出端口被占用异常，进一步验证上面猜测；</li>
</ul>
<p>分析出机器端口被占用完，接下来就是找出 FTPClient 中为什么会有大量端口没被释放的问题了。还是回到 <code>_openDataConnection_</code> 方法，在 FTPClient 与 FTP 进行数据交互时，每个数据交互操作都需要调用这个方法，该方法会返回一个与服务端进行数据传输的 Socket，猜想如果这些 Socket 没被关闭，那么就会不断有端口被占用。而跟踪代码可以发现，FTPClient 在用完这些 Socket 后，都及时调用了其 close 方法去关闭连接，所以上面的猜想又进入了死胡同。</p>
<p>在网上查阅相关资料，发现了下面一段描述：<code>socket.close()</code> 操作并不能立即释放绑定的端口，而是把端口设置为 TIME_WAIT 状态，过段时间(默认240s)才释放(用 <code>netstat -na</code> 可以看到)，如果建立短连接的操作较为频繁，可能会导致系统端口资源耗尽。所以，最终确定问题还是在 Socket 的关闭上，既然找到了问题所在，那么在不修改 FTPClient 代码的条件下，可采用如下解决方案：</p>
<ul>
<li>扩大机器可用的端口范围</li>
<li>开启端口的复用与快速回收</li>
</ul>
<p>运维人员按上述方案对操作系统进行设置之后，checkpoint 数据到 FTP 时，未再发生端口被占用问题。</p>
<h2 id="03-参考资料"><a href="#03-参考资料" class="headerlink" title="03.参考资料"></a>03.参考资料</h2><ul>
<li><a href="https://bbs.csdn.net/topics/320024769">请教Address already in use: connect问题</a></li>
<li><a href="https://www.cnblogs.com/dasusu/p/10006899.html">记录 FTPClient 超时处理的相关问题</a></li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink 源码浅析 001：算子内部做了什么</title>
    <url>/2018/05/18/flink/Flink%20%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%20001%EF%BC%9A%E7%AE%97%E5%AD%90%E5%86%85%E9%83%A8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<blockquote>
<p>从读书到工作，断断续续记过一些笔记，但一直没能坚持下来。总结了几个原因：<br>1.嫌弃笔记的排版不美观<del>太丑了，写了自己都不想看<br>2.追求笔记的大而全</del>主题衍生内容繁杂，多到不想写<br>3.懒~显而易见😂</p>
<p>为了能坚持下去，特将本系列文章命名为《浅析》，提醒自己在每篇文章中，尽量用简短的篇幅、简明的语言去大致说清楚一个主题，要更多地关注主干脉络，不要陷在细枝末节中。</p>
<p>闲话少叙，本文我们来看下当调用 Flink 算子的时候，框架内部做了哪些工作。</p>
</blockquote>
<h2 id="有请-Word-Count"><a href="#有请-Word-Count" class="headerlink" title="有请 Word Count"></a>有请 Word Count</h2><p><code>Word Count</code> 之于大数据正如 <code>Hello World</code> 之于编程语言，虽然简单，但执行过程却涉及到底层的诸多方面。下面我们通过一个 <code>Flink Word Count</code> 示例来复习下 <code>Flink</code> 算子的使用，后文将以 <code>flatMap</code> 为例，来探究算子的内部实现。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-word-count.png"></p>
<h2 id="相关概念介绍"><a href="#相关概念介绍" class="headerlink" title="相关概念介绍"></a>相关概念介绍</h2><p>磨刀不误砍柴功，在探索 <code>flatMap</code> 的执行流程之前，先来看下 <code>Flink</code> 作业中的一些抽象，具体包括 <code>Function</code>、<code>StreamOperator</code>、<code>Transformation</code>、<code>DataStream</code>。</p>
<p><strong>1.Function</strong></p>
<p>用户自定义函数的基类，<code>Word Count</code> 示例中的 <code>Tokenizer</code> 实现了 <code>FlatMapFunction</code>，<code>FlatMapFunction</code> 便是 <code>Function</code> 的一个子类</p>
<p><strong>2.StreamOperator</strong></p>
<p><code>Flink</code> 算子在运行时的体现，<code>AbstractUdfStreamOperator</code> 是其一个抽象子类，表示包含 <code>Function</code> 的 <code>StreamOperator</code></p>
<p><strong>3.Transformation</strong></p>
<p>对 <code>DataStream</code> 的转换操作，<code>OneInputTransformation</code> 是其一个子类，包含 <code>OneInputStreamOperator</code></p>
<p><strong>4.DataStream</strong></p>
<p>可以简单将其理解为对 <code>Transformation</code> 和 <code>StreamExecutionEnvironment</code> 的上层封装，<code>SingleOutputStreamOperator</code> 是其一个子类</p>
<h2 id="flatMap-执行流程"><a href="#flatMap-执行流程" class="headerlink" title="flatMap 执行流程"></a>flatMap 执行流程</h2><p><code>flatMap</code> 的调用链如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-method-doTransform.png"></p>
<p><strong>1.获取 <code>FlatMapFunction</code> 的返回类型，然后调用带返回类型的重载方法</strong></p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-method-flatmap-1.png"></p>
<p>调用 <code>flatMap</code> 方法时，如果没有指定返回类型，那么会通过 <code>TypeExtractor</code> 来自动提取返回类型，然后再调用带返回类型的重载方法。</p>
<p>上述代码中有几个有意思的地方有必要了解下：</p>
<ul>
<li><code>clean(flatMapper)</code>：闭包清除。简单解释下，内部类持有外部类的引用，如果外部类不可序列化，那么内部类即使实现了序列化接口，也是无法序列化的，闭包清除就是通过字节码技术，将内部类中持有的外部类引用给清除掉，更多信息可参考：<a href="https://issues.apache.org/jira/browse/FLINK-1325">FLINK-1325</a>；</li>
<li><code>Utils.getCallLocationName()</code>：获取方法的调用位置，该功能是通过 <code>Thread#getStackTrace()</code> 实现的，我们一般很少使用，在框架或工具中用的较多；</li>
<li><code>getFlatMapReturnTypes</code> 的第四个参数：true 表示当提取类型失败时，返回一个 <code>MissingTypeInfo</code> 实例，而不是抛出异常；</li>
</ul>
<p>2.创建 <code>StreamFlatMap</code>，调用 <code>transform</code> 方法</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-datastream-flatmap-2.png"></p>
<p><code>StreamFlatMap</code> 是 <code>AbstractUdfStreamOperator</code> 的子类，在 <code>Flink</code> 作业运行时，每来一条数据，其 <code>processElement</code> 方法会被调用一次，内部其实就是调用 <code>FlatMapFunction</code> 的 <code>flatMap</code> 方法来处理数据。</p>
<p>3.创建 <code>SimpleOperatorFactory</code>，调用 <code>doTransform</code> 方法</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-method-transform.png"></p>
<p><code>SimpleOperatorFactory</code> 是 <code>StreamOperator</code> 的工厂类子类，是对已有 <code>StreamOperator</code> 的封装，可以对 <code>StreamOperator</code> 做一些额外配置，如设置算子链接策略、定时器服务等。</p>
<p>4.实现用户代码到 <code>Transformation</code> 转换的核心逻辑</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-method-doTransform-1.png"></p>
<p>这里进入到创建 <code>Transformation</code> 的核心流程：</p>
<ul>
<li>触发异常：前面我们提到过，<code>TypeExtractor#getFlatMapReturnTypes</code> 方法提取函数的返回类型时，第四个参数用于控制类型提取失败时是否抛出异常，如果为 true，不抛出异常，而是返回 <code>MissingTypeInfo</code>。当前步骤的目的即是用于触发异常，当上一个 <code>Transformation</code> 的输出是 <code>MissingTypeInfo</code> 时，抛出异常；</li>
<li>创建 <code>OneInputTransformation</code>：可以发现，<code>OneInputTransformation</code> 除了包含 <code>StreamOperator</code> 外，还记录了上游 <code>Transformation</code>、输出类型、并行度等信息；</li>
<li>将 <code>Transformation</code> 和 <code>StreamExecutionEnvironment</code> 封装为 <code>DataStream</code>，这里是 <code>SingleOutputStreamOperator</code>；</li>
<li>将 <code>Transformation</code> 记录到 <code>StreamExecutionEnvironment</code>：<code>StreamExecutionEnvironment</code> 有个列表类型的成员变量 <code>transformations</code>，用于顺序记录 <code>Flink</code> 作业中包含的 <code>Transformation</code>，后续将遍历该成员变量来创建 <code>StreamGraph</code>；</li>
<li>返回 DataStream，继续执行转换；</li>
</ul>
<p>熟悉 <code>Flink</code> 的用户应该知道，我们可以调用 <code>setParallelism</code> 方法来指定算子的并行度，其方法实现如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/flink-method-setParallelism.png"></p>
<p>可以发现，这里其实是设置  <code>Transformation</code>  的并行度。并不是所有的 <code>Transformation</code> 都是可以并行的，所以设置之前，会先对并行度的合法性进行校验。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用户算子的执行过程，其实就是创建 <code>Transformation</code> 的过程，这些 <code>Transformation</code> 记录在 <code>StreamExecutionEnvironment</code> 中，后续将基于此来创建 <code>StreamGraph</code>。</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 的 Next 主题美化</title>
    <url>/2022/06/06/github/Hexo%20%E7%9A%84%20Next%20%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-NexT-主题的下载与安装"><a href="#01-NexT-主题的下载与安装" class="headerlink" title="01.NexT 主题的下载与安装"></a>01.NexT 主题的下载与安装</h2><ul>
<li>下载 <a href="https://github.com/theme-next/hexo-theme-next/releases">NexT</a> 主题并将其解压到博客的 themes 目录下，修改名称为 next；</li>
<li>修改博客根目录下的 _config.yml，将 theme 项设置为 next;</li>
</ul>
<h2 id="02-设置-NexT-主题样式"><a href="#02-设置-NexT-主题样式" class="headerlink" title="02.设置 NexT 主题样式"></a>02.设置 NexT 主题样式</h2><p>编辑 next 主题目录下的 _config.yml 文件，打开相应 schema 的注释，细节如下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

<h2 id="03-设置-Hexo-使用中文"><a href="#03-设置-Hexo-使用中文" class="headerlink" title="03.设置 Hexo 使用中文"></a>03.设置 Hexo 使用中文</h2><p>编辑博客根目录下的 _config.yml 文件，修改 language 项，细节如下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>

<h2 id="04-设置-NexT-主题头像"><a href="#04-设置-NexT-主题头像" class="headerlink" title="04.设置 NexT 主题头像"></a>04.设置 NexT 主题头像</h2><p>编辑 next 主题目录下的 _config.yml 文件，具体设置如下（<code>images</code> 位于 <code>themes/next/source</code> 下）。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># 头像图片</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/gakki.png</span></span><br><span class="line">  <span class="comment"># 头像为圆形</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 鼠标移动到头像时，头像旋转</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="05-设置博客标题、作者信息"><a href="#05-设置博客标题、作者信息" class="headerlink" title="05.设置博客标题、作者信息"></a>05.设置博客标题、作者信息</h2><p>编辑博客根目录下的 _config.yml 文件，具体设置如下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Leo&#x27;s</span> <span class="string">Blog</span> <span class="comment">#标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;坐标杭州，卖马为生&#x27;</span> <span class="comment">#子标题</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Leo</span> <span class="comment">#作者信息</span></span><br></pre></td></tr></table></figure>

<h2 id="06-设置博客动态背景"><a href="#06-设置博客动态背景" class="headerlink" title="06.设置博客动态背景"></a>06.设置博客动态背景</h2><p>启用 three 背景的方式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.进入 next 主题目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">themes/next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.拉取 three 背景依赖</span></span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-three</span> <span class="string">source/lib/three</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.编辑 next 主题目录下的 _config.yml 文件</span></span><br><span class="line"><span class="attr">three:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">three_waves:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>启用 canvas-nest 背景的方式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.进入 next 主题目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">themes/next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.拉取 canvas-next 背景依赖</span></span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-canvas-nest</span> <span class="string">source/lib/canvas-nest</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.编辑 next 主题目录下的 _config.yml 文件</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># Display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;0,0,255&quot;</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># The opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">150</span> <span class="comment"># The number of lines, default 99</span></span><br></pre></td></tr></table></figure>

<p>启用 canvas-ribbon 背景的方式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.进入 next 主题目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">themes/next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.拉取 canvas-ribbon 背景依赖</span></span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-canvas-ribbon</span> <span class="string">source/lib/canvas-ribbon</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.编辑 next 主题目录下的 _config.yml 文件</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示1：要删除 clone 下来的依赖包中的 .git 文件夹</p>
<p>提示2：如果下载的依赖无法提交到 github，则可能是由 next 目录下的 .gitignore 引起的</p>
<p>提示3：我使用的动态背景是 canvas-nest</p>
</blockquote>
<h2 id="07-设置页面加载效果"><a href="#07-设置页面加载效果" class="headerlink" title="07.设置页面加载效果"></a>07.设置页面加载效果</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.进入 next 主题目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">themes/next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.拉取 three 背景依赖</span></span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/theme-next-pace</span> <span class="string">source/lib/pace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.编辑 next 主题目录下的 _config.yml 文件</span></span><br><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom </span></span><br><span class="line">  <span class="comment"># center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash </span></span><br><span class="line">  <span class="comment"># loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">center-atom</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示1：要删除 clone 下来的依赖包中的 .git 文件夹</p>
<p>提示2：如果下载的依赖无法提交到 github，则可能是由 next 目录下的 .gitignore 引起的</p>
</blockquote>
<h2 id="08-设置鼠标点击特效"><a href="#08-设置鼠标点击特效" class="headerlink" title="08.设置鼠标点击特效"></a>08.设置鼠标点击特效</h2><p>首先在 themes&#x2F;next&#x2F;source&#x2F;js&#x2F;src 里面建一个叫 fireworks.js 的文件（<code>src</code> 文件夹需要自己创建），代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">function</span> <span class="title function_">updateCoords</span>(<span class="params">e</span>)&#123;pointerX=(e.<span class="property">clientX</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>)-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>,pointerY=e.<span class="property">clientY</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>&#125;<span class="keyword">function</span> <span class="title function_">setParticuleDirection</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> t=anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">360</span>)*<span class="title class_">Math</span>.<span class="property">PI</span>/<span class="number">180</span>,a=anime.<span class="title function_">random</span>(<span class="number">50</span>,<span class="number">180</span>),n=[-<span class="number">1</span>,<span class="number">1</span>][anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.<span class="property">x</span>+n*<span class="title class_">Math</span>.<span class="title function_">cos</span>(t),<span class="attr">y</span>:e.<span class="property">y</span>+n*<span class="title class_">Math</span>.<span class="title function_">sin</span>(t)&#125;&#125;<span class="keyword">function</span> <span class="title function_">createParticule</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=colors[anime.<span class="title function_">random</span>(<span class="number">0</span>,colors.<span class="property">length</span>-<span class="number">1</span>)],a.<span class="property">radius</span>=anime.<span class="title function_">random</span>(<span class="number">16</span>,<span class="number">32</span>),a.<span class="property">endPos</span>=<span class="title function_">setParticuleDirection</span>(a),a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">fillStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">fill</span>()&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">createCircle</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=<span class="string">&quot;#F00&quot;</span>,a.<span class="property">radius</span>=<span class="number">0.1</span>,a.<span class="property">alpha</span>=<span class="number">0.5</span>,a.<span class="property">lineWidth</span>=<span class="number">6</span>,a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="property">globalAlpha</span>=a.<span class="property">alpha</span>,ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">lineWidth</span>=a.<span class="property">lineWidth</span>,ctx.<span class="property">strokeStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">stroke</span>(),ctx.<span class="property">globalAlpha</span>=<span class="number">1</span>&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">renderParticule</span>(<span class="params">e</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.<span class="property">animatables</span>.<span class="property">length</span>;t++)&#123;e.<span class="property">animatables</span>[t].<span class="property">target</span>.<span class="title function_">draw</span>()&#125;&#125;<span class="keyword">function</span> <span class="title function_">animateParticules</span>(<span class="params">e,t</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="title function_">createCircle</span>(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class="title function_">push</span>(<span class="title function_">createParticule</span>(e,t))&#125;anime.<span class="title function_">timeline</span>().<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">x</span>&#125;,<span class="attr">y</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">y</span>&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.<span class="title function_">random</span>(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> n=<span class="variable language_">this</span>,i=<span class="variable language_">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;e.<span class="title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;canvasEl.<span class="property">width</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerWidth</span>,canvasEl.<span class="property">height</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerHeight</span>,canvasEl.<span class="property">style</span>.<span class="property">width</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="property">style</span>.<span class="property">height</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">scale</span>(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=<span class="title function_">anime</span>(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,canvasEl.<span class="property">width</span>,canvasEl.<span class="property">height</span>)&#125;&#125;);<span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(tap,<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="string">&quot;sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;(render.<span class="title function_">play</span>(),<span class="title function_">updateCoords</span>(e),<span class="title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="number">1</span>),<span class="title function_">setCanvasSize</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">&quot;use strict&quot;</span>;<span class="keyword">function</span> <span class="title function_">updateCoords</span>(<span class="params">e</span>)&#123;pointerX=(e.<span class="property">clientX</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>)-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>,pointerY=e.<span class="property">clientY</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>&#125;<span class="keyword">function</span> <span class="title function_">setParticuleDirection</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> t=anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">360</span>)*<span class="title class_">Math</span>.<span class="property">PI</span>/<span class="number">180</span>,a=anime.<span class="title function_">random</span>(<span class="number">50</span>,<span class="number">180</span>),n=[-<span class="number">1</span>,<span class="number">1</span>][anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.<span class="property">x</span>+n*<span class="title class_">Math</span>.<span class="title function_">cos</span>(t),<span class="attr">y</span>:e.<span class="property">y</span>+n*<span class="title class_">Math</span>.<span class="title function_">sin</span>(t)&#125;&#125;<span class="keyword">function</span> <span class="title function_">createParticule</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=colors[anime.<span class="title function_">random</span>(<span class="number">0</span>,colors.<span class="property">length</span>-<span class="number">1</span>)],a.<span class="property">radius</span>=anime.<span class="title function_">random</span>(<span class="number">16</span>,<span class="number">32</span>),a.<span class="property">endPos</span>=<span class="title function_">setParticuleDirection</span>(a),a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">fillStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">fill</span>()&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">createCircle</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=<span class="string">&quot;#F00&quot;</span>,a.<span class="property">radius</span>=<span class="number">0.1</span>,a.<span class="property">alpha</span>=<span class="number">0.5</span>,a.<span class="property">lineWidth</span>=<span class="number">6</span>,a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="property">globalAlpha</span>=a.<span class="property">alpha</span>,ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">lineWidth</span>=a.<span class="property">lineWidth</span>,ctx.<span class="property">strokeStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">stroke</span>(),ctx.<span class="property">globalAlpha</span>=<span class="number">1</span>&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">renderParticule</span>(<span class="params">e</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.<span class="property">animatables</span>.<span class="property">length</span>;t++)&#123;e.<span class="property">animatables</span>[t].<span class="property">target</span>.<span class="title function_">draw</span>()&#125;&#125;<span class="keyword">function</span> <span class="title function_">animateParticules</span>(<span class="params">e,t</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="title function_">createCircle</span>(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class="title function_">push</span>(<span class="title function_">createParticule</span>(e,t))&#125;anime.<span class="title function_">timeline</span>().<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">x</span>&#125;,<span class="attr">y</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">y</span>&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.<span class="title function_">random</span>(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> n=<span class="variable language_">this</span>,i=<span class="variable language_">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;e.<span class="title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;canvasEl.<span class="property">width</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerWidth</span>,canvasEl.<span class="property">height</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerHeight</span>,canvasEl.<span class="property">style</span>.<span class="property">width</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="property">style</span>.<span class="property">height</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">scale</span>(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=<span class="title function_">anime</span>(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,canvasEl.<span class="property">width</span>,canvasEl.<span class="property">height</span>)&#125;&#125;);<span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(tap,<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="string">&quot;sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;(render.<span class="title function_">play</span>(),<span class="title function_">updateCoords</span>(e),<span class="title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="number">1</span>),<span class="title function_">setCanvasSize</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure>

<p>打开 themes&#x2F;next&#x2F;layout&#x2F;_layout.swig ,在 <code>&lt;/body&gt;</code> 标签上方添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.fireworks %&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;fireworks&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!-- js 脚本的地址需要根据具体情况进行调整 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/fireworks.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>打开 themes&#x2F;next&#x2F;_config.yml，在文件末尾添加如下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fireworks</span></span><br><span class="line"><span class="attr">fireworks:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示1：如果 src 目录不存在，则需要手动创建</p>
<p>提示2：在 _layout.swig 中添加代码时，注意是否需要调整 js 脚本的路径。如果博客的 root 地址是 &#x2F; 则无需修改，如过博客的 root 地址是 &#x2F;blog&#x2F;，则 js 脚本的地址前面就需要加上 &#x2F;blog </p>
</blockquote>
<h2 id="09-取消目录中标题自动编号"><a href="#09-取消目录中标题自动编号" class="headerlink" title="09.取消目录中标题自动编号"></a>09.取消目录中标题自动编号</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，具体配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<h2 id="10-隐藏页面底部文字"><a href="#10-隐藏页面底部文字" class="headerlink" title="10.隐藏页面底部文字"></a>10.隐藏页面底部文字</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，具体配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line"><span class="attr">powered:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>打开 <code>themes/next/layout/_partials/footer.swig</code>，注释掉如下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;div class=&quot;copyright&quot;&gt;</span></span><br><span class="line"><span class="comment">  ......</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="11-设置博客页面透明度"><a href="#11-设置博客页面透明度" class="headerlink" title="11.设置博客页面透明度"></a>11.设置博客页面透明度</h2><p>打开 themes\next\source\css\_schemes\Pisces\_layout.styl</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开 themes\next\source\css\_schemes\Gemini\index.styl</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-block</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comments</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pagination</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开 themes\next\source\css\_schemes\Pisces\_sidebar.styl</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.3</span>);</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="12-显示文章阅读进度"><a href="#12-显示文章阅读进度" class="headerlink" title="12.显示文章阅读进度"></a>12.显示文章阅读进度</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，具体配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会在 back2top 按钮上显示阅读百分比</span></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 会在页面上方显示一个阅读进度条</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：没必要都开启，我选择在 back2top 按钮上显示阅读百分比</p>
</blockquote>
<h2 id="13-启用本地搜索"><a href="#13-启用本地搜索" class="headerlink" title="13.启用本地搜索"></a>13.启用本地搜索</h2><p>在 <code>.github/workflows/pages.yml</code> 中添加如下配置（需要注意添加的位置）：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/install-hexo-generator-searchdb.png"></p>
<p>编辑博客根目录下的 _config.yml 文件，在底部添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Searh</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>

<p>打开 themes&#x2F;next&#x2F;_config.yml，启用本地搜索功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="14-启用标签页"><a href="#14-启用标签页" class="headerlink" title="14.启用标签页"></a>14.启用标签页</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，启用标签页：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<p>在博客根目录的 source 文件夹下创建一个名为 tags 的文件夹，在 tags 文件夹下创建一个 index.md 文件，文件内容如代码块所示，需要注意的是 type 的值必须写 tags，title 是标签页的标题，可以随意起（建议直接删掉 title，标签页有标题不美观）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签 </span><br><span class="line">date: 2020-01-28 17:40:00</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>给文章添加标签非常简单，不需要用户去将标签预先创建出来，只要在文章开头的描述内容中指定，相关标签就会自动生成。如下方代码块所示，这里为文章打了两个标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 的 NexT 主题美化</span><br><span class="line">date: 2020-01-28 10:20:20</span><br><span class="line">updated: 2020-01-28 16:16:16</span><br><span class="line">tags: [hexo,github]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>文章的标签还可以通过另一种方式来指定，如下方代码所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 的 NexT 主题美化</span><br><span class="line">date: 2020-01-28 10:20:20</span><br><span class="line">updated: 2020-01-28 16:16:16</span><br><span class="line">tags: </span><br><span class="line">  - hexo</span><br><span class="line">  - github</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="15-启用分类页"><a href="#15-启用分类页" class="headerlink" title="15.启用分类页"></a>15.启用分类页</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，启用标签页：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<p>在博客根目录的 source 文件夹下创建一个名为 categories 的文件夹，在 categories 文件夹下创建一个 index.md 文件，文件内容如代码块所示，需要注意的是 type 的值必须写 categories，title 是分类页的标题，可以随意起（建议直接删掉 title，分类页有标题不美观）。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span> </span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-01-28 17:40:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>与为文章添加标签类似，为文章添加所属类别也只需在文章开头的描述内容中指定，示例如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 的 NexT 主题美化</span><br><span class="line">date: 2020-01-28 10:20:20</span><br><span class="line">updated: 2020-01-28 16:16:16</span><br><span class="line">categories: </span><br><span class="line">  - 大数据</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>与一篇文章可以有多个标签不同，一篇文章只能属于一个类别，如果在指定类别时，指定了多个分类，那么就会形成层级关系，如下方代码块所示，该写法表示文章所属类别为 a&#x2F;b。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 的 NexT 主题美化</span><br><span class="line">date: 2020-01-28 10:20:20</span><br><span class="line">updated: 2020-01-28 16:16:16</span><br><span class="line">categories: </span><br><span class="line">  - a</span><br><span class="line">  - b</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="16-设置网站图标"><a href="#16-设置网站图标" class="headerlink" title="16.设置网站图标"></a>16.设置网站图标</h2><p>准备好两张图标，尺寸为 16x16 与 32x32。将下载好的图标放到 themes\next\source\images 目录中，然后打开 themes&#x2F;next&#x2F;_config.yml，设置网站图标。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/paw-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/paw-32x32-next.png</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>推荐：图标可以到 iconfont 下载</p>
</blockquote>
<h2 id="17-设置代码高亮主题"><a href="#17-设置代码高亮主题" class="headerlink" title="17.设置代码高亮主题"></a>17.设置代码高亮主题</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，具体配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">galactic</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">style:</span></span><br></pre></td></tr></table></figure>

<h2 id="18-公益404页面"><a href="#18-公益404页面" class="headerlink" title="18.公益404页面"></a>18.公益404页面</h2><p>新建 404.html，放到主题的 <code>source</code> 目录下，内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/plain&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://www.qq.com/404/search_children.js&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;/blog/&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">homePageName</span>=<span class="string">&quot;回到我的主页&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/data.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/page.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="19-隐藏文章底部-标签"><a href="#19-隐藏文章底部-标签" class="headerlink" title="19.隐藏文章底部#标签"></a>19.隐藏文章底部#标签</h2><p>打开 themes\next\layout_macro\post.swig，注释掉如下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">  &#123;%- if post<span class="selector-class">.tags</span> and post<span class="selector-class">.tags</span><span class="selector-class">.length</span> %&#125;</span><br><span class="line">    &#123;%- if theme<span class="selector-class">.tag_icon</span> %&#125;</span><br><span class="line">      &#123;%- set tag_indicate = &#x27;&lt;<span class="selector-tag">i</span> class=&quot;fa fa-tag&quot;&gt;&lt;/<span class="selector-tag">i</span>&gt;&#x27; %&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">      &#123;%- set tag_indicate = &#x27;#&#x27; %&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;post-tags&quot;&gt;</span><br><span class="line">      &#123;%- for tag in post<span class="selector-class">.tags</span><span class="selector-class">.toArray</span>() %&#125;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> href=&quot;&#123;&#123; url_for(tag<span class="selector-class">.path</span>) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag<span class="selector-class">.name</span> &#125;&#125;&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<h2 id="20-去除顶部黑线"><a href="#20-去除顶部黑线" class="headerlink" title="20.去除顶部黑线"></a>20.去除顶部黑线</h2><p>打开 <code>themes/next/layout/_layout.swig</code>，注释掉如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt; </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="21-启用关于页"><a href="#21-启用关于页" class="headerlink" title="21.启用关于页"></a>21.启用关于页</h2><p>打开 <code>themes/next/_config.yml</code>，启用关于页：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<p>在博客根目录的 source 文件夹下创建一个名为 about 的文件夹，在 about 文件夹下创建一个 index.md 文件，文件头如代码块所示，其中 title 是关于页的标题，可以随意起：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">关于</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-06-07 14:48:56</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h2 id="22-设置看板娘"><a href="#22-设置看板娘" class="headerlink" title="22.设置看板娘"></a>22.设置看板娘</h2><p>首先，拉取 <code>live2d-widget</code> 项目到 <code>themes/next/source</code> 目录下（记得删除 <code>.git</code> 文件夹）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/stevenjoezhang/live2d-widget.git source/live2d-widget</span><br></pre></td></tr></table></figure>

<p>然后，打开<code>live2d-widget</code> 项目中的 <code>autoload.js</code> 文件，修改指定代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;/live2d-widget/&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>接着，打开 <code>themes/next/layout/_layout.swig</code> 文件， 在 <code>&lt;/body&gt;</code> 标签上方添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后，打开主题配置文件 <code>themes/next/_config.yml</code> ，在其中末尾添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="23-设置标签云"><a href="#23-设置标签云" class="headerlink" title="23.设置标签云"></a>23.设置标签云</h2><p>在 <code>.github/workflows/pages.yml</code> 中添加如下配置（需要注意添加的位置）：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/install-hexo-tag-cloud.png"></p>
<p>打开 <code>next/layout/_macro/sidebar.swig</code>，添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;/js/tagcloud.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;/js/tagcanvas.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;widget-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 显示标题不美观，所以给注释掉 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h3 class=&quot;widget-title&quot;&gt;Tag Cloud&lt;/h3&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myCanvasContainer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;widget tagcloud&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">id</span>=<span class="string">&quot;resCanvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>添加位置如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/hexo-tag-cloud-in-sidebar-swig.png"></p>
<p>打开博客根目录下的 <code>_config.yml</code> 文件，添加如下设置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-tag-cloud</span></span><br><span class="line"><span class="attr">tag_cloud:</span></span><br><span class="line">    <span class="attr">textFont:</span> <span class="string">&#x27;Trebuchet MS, Helvetica&#x27;</span></span><br><span class="line">    <span class="attr">textColor:</span> <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">    <span class="attr">textHeight:</span> <span class="number">25</span></span><br><span class="line">    <span class="attr">outlineColor:</span> <span class="string">&#x27;#E2E1D1&#x27;</span></span><br><span class="line">    <span class="attr">maxSpeed:</span> <span class="number">0.1</span> <span class="comment"># range from [0.01 ~ 1]</span></span><br><span class="line">    <span class="attr">pauseOnSelected:</span> <span class="literal">false</span> <span class="comment"># true means pause the cloud tag movement when highlight a tag</span></span><br></pre></td></tr></table></figure>

<h2 id="24-参考资源"><a href="#24-参考资源" class="headerlink" title="24.参考资源"></a>24.参考资源</h2><ul>
<li><a href="https://theme-next.org/">主题官网-新</a></li>
<li><a href="http://theme-next.iissnan.com/">主题官网-旧</a></li>
<li><a href="https://www.bilibili.com/video/av17653359">使用Hexo博客搭建的个人博客，使用Next主题来进行优化改造</a></li>
<li><a href="https://www.jianshu.com/p/9f0e90cc32c2">Hexo-NexT配置超炫网页效果</a></li>
<li><a href="https://blog.csdn.net/lcyaiym/article/details/76768762?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-76768762-blog-61414438.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-76768762-blog-61414438.pc_relevant_default&utm_relevant_index=1">hexo的next创建关于我</a></li>
<li><a href="https://blog.51cto.com/u_13640625/3032364">Next主题中添加超级好玩的看板娘（CDN方式）</a></li>
<li><a href="https://www.ngui.cc/51cto/show-540008.html">Hexo博客+Next主题深度优化与定制</a></li>
<li><a href="https://github.com/stevenjoezhang/live2d-widget">stevenjoezhang&#x2F;live2d-widget: 把萌萌哒的看板娘抱回家 (ノ≧∇≦)ノ</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1934183">Hexo博客建立标签云及效果展示</a></li>
<li><a href="https://github.com/D0n9X1n/hexo-tag-cloud">D0n9X1n&#x2F;hexo-tag-cloud: Yet, just another tag cloud plugin for hexo</a></li>
</ul>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Github + PicGo 搭建个人图床</title>
    <url>/2022/06/06/github/%E5%9F%BA%E4%BA%8E%20Github%20+%20PicGo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-生成-Github-私人令牌"><a href="#01-生成-Github-私人令牌" class="headerlink" title="01.生成 Github 私人令牌"></a>01.生成 Github 私人令牌</h2><p>通过<a href="https://github.com/settings/tokens">链接</a>进入 <code>Github</code> 的 <code>tokens</code> 页面，点击页面右上方的 <code>Generate new token</code> 按钮创建一个新的 <code>token</code>，记下这个 <code>token</code>，后面会使用到。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/github-token.png"></p>
<h2 id="02-配置-Github-图床"><a href="#02-配置-Github-图床" class="headerlink" title="02.配置 Github 图床"></a>02.配置 Github 图床</h2><p>下载安装 <a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>，配置 Github 图床，配置细节如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/pocgo-github.png"></p>
<h2 id="03-上传图片到-Github-图床"><a href="#03-上传图片到-Github-图床" class="headerlink" title="03.上传图片到 Github 图床"></a>03.上传图片到 Github 图床</h2><p>上传图片后，返回的链接会自动进入剪贴板，可直接粘贴使用。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/pocgo-github-1.png"></p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Hexo + Github Pages + Github Actions 搭建个人博客</title>
    <url>/2022/06/06/github/%E5%9F%BA%E4%BA%8E%20Hexo%20+%20Github%20Pages%20+%20Github%20Actions%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="01-初始化仓库"><a href="#01-初始化仓库" class="headerlink" title="01.初始化仓库"></a>01.初始化仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init zhoulii.github.io</span><br><span class="line">cd zhoulii.github.io</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;initialize zhoulii.github.io&quot;</span><br><span class="line">git remote add origin https://github.com/zhoulii/zhoulii.github.io.git</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h2 id="02-配置-Github-Actions"><a href="#02-配置-Github-Actions" class="headerlink" title="02.配置 Github Actions"></a>02.配置 Github Actions</h2><p>在仓库中创建 <code>.github/workflows/pages.yml</code>，具体内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name: deploy zhoulii.github.io  </span><br><span class="line">  </span><br><span class="line">on:  </span><br><span class="line">  push:  </span><br><span class="line">    branches:  </span><br><span class="line">      - master</span><br><span class="line">  </span><br><span class="line">jobs:  </span><br><span class="line">  pages:  </span><br><span class="line">    runs-on: ubuntu-latest  </span><br><span class="line">    steps:  </span><br><span class="line">      - uses: actions/checkout@v2  </span><br><span class="line">      - name: Use Node.js 16.x  </span><br><span class="line">        uses: actions/setup-node@v2  </span><br><span class="line">        with:  </span><br><span class="line">          node-version: &#x27;16&#x27;  </span><br><span class="line">      - name: Cache NPM dependencies  </span><br><span class="line">        uses: actions/cache@v2  </span><br><span class="line">        with:  </span><br><span class="line">          path: node_modules  </span><br><span class="line">          key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache  </span><br><span class="line">          restore-keys: |  </span><br><span class="line">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache  </span><br><span class="line">      - name: Install Dependencies  </span><br><span class="line">        run: npm install  </span><br><span class="line">      - name: Build  </span><br><span class="line">        run: npm run build  </span><br><span class="line">      - name: Deploy  </span><br><span class="line">        uses: peaceiris/actions-gh-pages@v3  </span><br><span class="line">        with:  </span><br><span class="line">          github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;  </span><br><span class="line">          publish_dir: ./public</span><br></pre></td></tr></table></figure>
<p>需要注意两点：</p>
<ul>
<li><code>node</code> 版本需要与本地机器一致（可使用 <code>node --version</code> 查看）</li>
<li>配置中的变量不需要手动指定</li>
</ul>
<p>将 <code>.github/workflows/pages.yml</code> 同步到远程仓库，点击仓库主页的 <code>Actions</code> 标签，可以看到 <code>workflow</code> 的执行情况。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/github-actions-hexo.png"></p>
<p><code>workflow</code> 执行完成后，仓库会多出一个名为 <code>gh-pages</code> 的分支，<code>Hexo</code> 生成的静态网站文件即在该分支下。</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/gh-pages-branch.png"></p>
<h2 id="03-配置-Github-Pages"><a href="#03-配置-Github-Pages" class="headerlink" title="03.配置 Github Pages"></a>03.配置 Github Pages</h2><p><code>Hexo</code> 生成的静态网站文件在  <code>gh-pages</code>  分支下，接下来配置 <code>Github Pages</code> 从 <code>gh-pages</code>  分支构建站点：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/github-pages-hexo.png"></p>
<p>配置完成后，稍等个一两分钟，网站就可以访问了，网站首页如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/hello-world-hexo.png"></p>
<h2 id="04-参考资料"><a href="#04-参考资料" class="headerlink" title="04.参考资料"></a>04.参考资料</h2><ul>
<li><a href="https://hexo.io/docs/github-pages.html">GitHub Pages | Hexo</a></li>
<li><a href="https://github.com/peaceiris/actions-gh-pages">peaceiris&#x2F;actions-gh-pages: GitHub Actions for GitHub Pages</a></li>
<li><a href="https://www.jianshu.com/p/eadeddb792c5">博客之旅：从 Jekyll 到 Hexo</a></li>
</ul>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>QTTabBar 安装使用</title>
    <url>/2021/07/01/os/QTTabBar%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/panda-banner-1.png"></p>
<span id="more"></span>

<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>需要安装 .net3.5，win10 安装 .net3.5 的方法可参考 <a href="https://jingyan.baidu.com/article/455a9950dbe21de167277823.html">解决win10系统无法安装.NET Framework 3.5</a>。</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>国内开发者在 Github 上维护了一个 <a href="https://github.com/indiff/qttabbar">QTTabBar</a> 的汉化版本，下载安装即可，安装过程比较慢，耐心等待即可。</p>
<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p>QTTabBar 启用后，资源管理器里面有一些网格线，看着不舒服，去掉这些网格线的方法如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/remove_grid_lines_caused_by_qttabbar.png"></p>
<p>在标签栏有一个蓝色的加号按钮，看着也不习惯，去掉的方法如下：</p>
<p><img src="https://raw.githubusercontent.com/zhoulii/figure-bed/main/fig/remove_blue_button_on_tab_bar.png"></p>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>没有安装 .net3.5 的机器安装 QTTabBar 后，在启用时会闪退。此时，并不是说把 .net3.5 装上，QTTabBar 就能用了，需要先卸载 QTTabBar 并删除一些注册信息，然后再重新安装 QTTabBar，具体的操作可参考 <a href="https://gitee.com/qwop/qttabbar/attach_files/581136/download">打开选项闪退的解决方案修订版</a>。</p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
</search>
